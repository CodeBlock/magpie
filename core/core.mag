defclass Bool native
defclass Iterable native
defclass Indexable is Iterable native
defclass Channel is Iterable native
defclass Char native
defclass Class native
defclass Done native
defclass Function native
defclass List is Indexable native
defclass Nothing native
defclass Num native
defclass Float is Num native
defclass Int is Num native
defclass Record native
defclass String is Indexable native

defclass Error
end

defclass NoMatchError is Error
end

defclass NoMethodError is Error
end

defclass MethodCollisionError is Error
end

defclass ArgError is Error
    /// Error thrown when an invalid argument is passed to a method. This can
    /// be because the argument is never valid for a method, or because the
    /// argument's current state is invalid.
end

defclass UndefinedVarError is Error
end

def (is Int) + (is Int) native "intPlusInt"
def (is Int) + (is Float) native "intPlusFloat"
def (is Float) + (is Int) native "floatPlusInt"
def (is Float) + (is Float) native "floatPlusFloat"

def (is Int) - (is Int) native "intMinusInt"
def (is Int) - (is Float) native "intMinusFloat"
def (is Float) - (is Int) native "floatMinusInt"
def (is Float) - (is Float) native "floatMinusFloat"

def (is Int) * (is Int) native "intTimesInt"
def (is Int) * (is Float) native "intTimesFloat"
def (is Float) * (is Int) native "floatTimesInt"
def (is Float) * (is Float) native "floatTimesFloat"

def (is Int) / (is Int) native "intDivInt"
def (is Int) / (is Float) native "intDivFloat"
def (is Float) / (is Int) native "floatDivInt"
def (is Float) / (is Float) native "floatDivFloat"

// TODO(bob): What about floating point modulo?
def (is Int) % (is Int) native "intModInt"

def - (is Int) native "minusInt"
def - (is Float) native "minusFloat"

def (a) == (b) native "objectEqualsObject"
def (a) != (b) native "objectNotEqualsObject"

def (is Int) <=> (is Int) native "intCompareToInt"
def (is Int) <=> (is Float) native "intCompareToFloat"
def (is Float) <=> (is Int) native "floatCompareToInt"
def (is Float) <=> (is Float) native "floatCompareToFloat"

def (is Int) sgn native "intSgn"
def (is Float) sgn native "floatSgn"

def (a) < (b)
    a <=> b == -1
end

def (a) <= (b)
    a <=> b != 1
end

def (a) > (b)
    a <=> b == 1
end

def (a) >= (b)
    a <=> b != -1
end

def (is String) + (is String) native "stringPlusString"
def (left) + (right is String)
    left toString + right
end
def (left is String) + (right)
    left + right toString
end

def (left is String) * (right is Int)
    if right < 0 then throw ArgError new
    // TODO(bob): Use some kind of string builder?
    var result = ""
    for _ in 1..right do result = result + left
    result
end

def print(arg)
    print(arg toString)
    arg
end

def print(arg is String) native "printString"

def (_) class native "objectClass"

def (is String) count native "stringCount"

def (string is String)[index is Int]
    string _subscript(_boundsCheck(string count, index))
end

def (is String) _subscript(is Int) native "stringSubscriptInt"

def (_) toString native "objectToString"

def (is Int) toString native "intToString"
def (is Float) toString native "floatToString"
def (s is String) toString s

def sleep(ms: is Int) native "sleepMsInt"

def (is Channel) close native "channelClose"
def (is Channel) isOpen native "channelIsOpen"
def (== Channel) new native "channelNew"
def (is Channel) receive native "channelReceive"
def (is Channel) send(value) native "channelSend"

// Channels are themselves iterators, so iterating it returns itself.
def (channel is Channel) iterate
    channel
end

def (channel is Channel) advance
    channel receive
end

def (iterable is Iterable) pipeTo(channel is Channel)
    for i in iterable do channel send(i)
end

// TODO(bob): Instead of baking in a set of signatures, can this be handled
// more generically?
def (func is Function) call
    func _call(nothing)
end

def (func is Function) call(a)
    func _call(0: (0: a))
end

def (func is Function) call(a, b)
    // TODO(bob): Need a better way to say "don't destructure".
    func _call(0: (a, b))
end

def (func is Function) call(a, b, c)
    func _call(0: (a, b, c))
end

def (func is Function) call(a, b, c, d)
    func _call(0: (a, b, c, d))
end

def (func is Function) call(a, b, c, d, e)
    func _call(0: (a, b, c, d, e))
end

def (is Function) _call(arg) native "functionCall"

def (is List) add(item) native "listAdd"
def (is List) count native "listCount"

def _boundsCheck(count is Int, index is Int)
    // Negative indices index backwards from the end.
    if index < 0 then index = count + index

    // Check bounds.
    if index < 0 then throw ArgError new
    if index >= count then throw ArgError new

    index
end

def (list is List)[index is Int]
    list _subscript(_boundsCheck(list count, index))
end

def (is List) _subscript(is Int) native "listSubscriptInt"

def (list is List)[index is Int]=(value)
    list _subscriptSet(_boundsCheck(list count, index), value)
end

def (is List) _subscriptSet(index is Int, value) native "listSubscriptSetInt"

def (list is List)[range is Range]
    val first = range first
    val last = range last + (if range inclusive then 1 else 0)

    if first < 0 or first > list count or
        last < 0 or last > list count then throw ArgError new

    list _subscript(first, last)
end

def (is List) _subscript(first is Int, last is Int) native "listSubscriptRange"

def (is List) insert(item, at: index is Int) native "listInsert"

def (is List) clear native "listClear"

def (list is List) remove(at: index is Int)
    list _remove(at: _boundsCheck(list count, index))
end

def (is List) _remove(at: index is Int) native "listRemoveAt"

def (list is List) first
    list[0]
end

def (list is List) last
    list[-1]
end

def (iterable is Iterable) first
    for i in iterable do return i
    // If we got here, there were no values.
    throw ArgError new
end

def (iterable is Iterable) count
    var count = 0
    for i in iterable do count = count + 1
    count
end

def (iterable is Iterable) each(callback is Function)
    for i in iterable do if callback call(i) == done then break
    iterable
end

// TODO(bob): Could specialize this for Indexables to create a result list with
// the right capacity up front.
def (iterable is Iterable) toList
    val result = []
    for i in iterable do result add(i)
    result
end

def (iterable is Iterable) contains(item)
    for i in iterable do
        if i == item then return true
    end

    false
end

def (iterable is Iterable) join
    // TODO(bob): Use a string builder for perf.
    var result = ""
    for i in iterable do
        result = result + i toString
    end
    result
end

def (iterable is Iterable) join(separator is String)
    // TODO(bob): Use a string builder for perf.
    var result = ""
    var first = true
    for i in iterable do
        if not first then result = result + separator
        result = result + i toString
        first = false
    end
    result
end

// Make indexable collections iterable.
defclass IndexableIterator
    val collection is Indexable
    var index is Int
end

def (collection is Indexable) iterate
    IndexableIterator new(collection: collection, index: -1)
end

def (iterator is IndexableIterator) advance
    iterator index = iterator index + 1
    if iterator index >= iterator collection count then
        done
    else
        iterator collection[iterator index]
    end
end

/// An iterable object that simply wraps a function which will create the
/// iterator.
defclass _FactoryIterable is Iterable
    /// The factory function that will create an iterator when invoked.
    val factory is Function
end

def (t is _FactoryIterable) iterate
    t factory call
end

def (== _FactoryIterable) new(factory is Function)
    _FactoryIterable new(factory: factory)
end

// where()

def (i is Iterable) where(predicate is Function)
    _FactoryIterable new do
        _WhereIterator new(iterator: i iterate, predicate: predicate)
    end
end

defclass _WhereIterator
    /// The sequence being mapped.
    val iterator

    /// The filter function.
    val predicate is Function
end

def (w is _WhereIterator) advance
    while true do
        match w iterator advance
            case == done then return done
            case value then
                match w predicate call(value)
                    case true then return value
                    case == done then return done
                    else nothing
                end
            end
        end
    end
end

// map()

def (i is Iterable) map(transform is Function)
    _FactoryIterable new do
        _MapIterator new(iterator: i iterate, transform: transform)
    end
end

defclass _MapIterator
    /// The sequence being mapped.
    val iterator

    /// The transformation function.
    val transform is Function
end

def (m is _MapIterator) advance
    match m iterator advance
        case == done then done
        case value then m transform call(value)
    end
end

// skip()

def (i is Iterable) skip(count is Int)
    if count < 0 then throw ArgError new
    i where as item do
        if count <= 0 then return true
        count = count - 1
        false
    end
end

// TODO(bob): What about floating point ranges?
defclass Range
    val first is Int
    val last is Int
    val inclusive is Bool
end

def (== Range) new(first: first is Int, last: last is Int)
    Range new(first: first, last: last, inclusive: true)
end

def (first is Int) .. (last is Int)
    Range new(first: first, last: last)
end

def (first is Int) ... (last is Int)
    Range new(first: first, last: last, inclusive: false)
end

def (range is Range) iterate
    var last = range last
    if not range inclusive  then last = last - 1
    RangeIterator new(current: range first - 1, last: last)
end

defclass RangeIterator
    var current is Int
    val last is Int
end

def (iterator is RangeIterator) advance
    if iterator current + 1 > iterator last then
        done
    else
        iterator current = iterator current + 1
    end
end

// TODO(bob): Where should this go?
def exit(exitCode is Int) native "exit"

// TODO(bob): Figure out something more systematic for dealing with std streams.
def printError(text)
    printError(text toString)
end

def printError(text is String) native "printErrorString"

// When an error isn't caught, the error object needs to be shown to the user.
// This means calling toString on it, which means running Magpie code. Since
// the fiber where the error was thrown is in a bad state, we'll create a
// separate fiber whose sole job is to receive an error object, print it, then
// kill the VM.
val _errorChannel = Channel new
async
    do
        printError(_errorChannel receive)
    catch _ then
        printError("Could not display error.")
    end

    // TODO(bob): Should have a way to handle uncaught errors from other fibers.
    exit(3)
end

// Now that everything is defined, wire it up to the VM.
def _bindCore() native "bindCore"
_bindCore()
