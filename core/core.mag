defclass Bool native
defclass Channel native
defclass Class native
defclass Function native
defclass List native
defclass Nothing native
defclass Num native
defclass Record native
defclass String native

defclass NoMatchError
end

defclass NoMethodError
end

defclass UndefinedVarError
end

def (is Num) + (is Num) native "numPlusNum"
def (is Num) - (is Num) native "numMinusNum"
def (is Num) * (is Num) native "numTimesNum"
def (is Num) / (is Num) native "numDivNum"

def (is Num) < (is Num) native "numLessThanNum"
def (is Num) <= (is Num) native "numLessThanEqualToNum"
def (is Num) > (is Num) native "numGreaterThanNum"
def (is Num) >= (is Num) native "numGreaterThanEqualToNum"

def (is String) + (is String) native "stringPlusString"
def (left) + (right is String)
    left toString + right
end
def (left is String) + (right)
    left + right toString
end

def print(arg)
    print(arg toString)
    arg
end

def print(arg is String) native "printString"

def (_) class native "objectClass"

def (is String) count native "stringCount"

def (_) toString native "objectToString"

def (true) toString "true"
def (false) toString "false"

def (is Num) toString native "numToString"
def (s is String) toString s

def (== Channel) new native "channelNew"
def (is Channel) send(value) native "channelSend"
def (is Channel) receive native "channelReceive"

// TODO(bob): How should different argument patterns be handled?
def (is Function) call native "functionCall"

// TODO(bob): Temp!
def (is Function) run native "functionRun"

def (is List) add(item) native "listAdd"
def (is List) count native "listCount"
def (is List)[is Num] native "listIndex"
def (is List)[index is Num]=(value) native "listIndexSet"
def (is List) insert(item, at: index is Num) native "listInsert"

// Makes lists iterable.
defclass ListIterator
    val list is List
    var index
end

def (list is List) iterate
    ListIterator new(list: list, index: -1)
end

def (iterator is ListIterator) current
    iterator list[iterator index]
end

def (iterator is ListIterator) next
    iterator index = iterator index + 1
    iterator index < iterator list count
end
