defclass Bool
end

defclass Class
end

defclass List
end

defclass Nothing
end

defclass Num
end

defclass Record
end

defclass String
end

defclass NoMatchError
end

def (is Num) + (is Num) native "numPlusNum"
def (is Num) - (is Num) native "numMinusNum"
def (is Num) * (is Num) native "numTimesNum"
def (is Num) / (is Num) native "numDivNum"

def (is Num) < (is Num) native "numLessThanNum"
def (is Num) <= (is Num) native "numLessThanEqualToNum"
def (is Num) > (is Num) native "numGreaterThanNum"
def (is Num) >= (is Num) native "numGreaterThanEqualToNum"

def (is String) + (is String) native "stringPlusString"
def (left) + (right is String)
    left toString + right
end
def (left is String) + (right)
    left + right toString
end

def print(arg)
    print(arg toString)
end

def print(arg is String) native "printString"

def (is String) count native "stringCount"

// TODO(bob): Do something better here?
def (arg) toString "[Object]"

def (true) toString "true"
def (false) toString "false"

def (is Num) toString native "numToString"
def (s is String) toString s

def (is List) count native "listCount"

def (is List)[is Num] native "listIndex"
def (is List)[index is Num]=(value) native "listIndexSet"

// Makes lists iterable.
defclass ListIterator
    val list is List
    var index
end

def (list is List) iterate
    ListIterator new(list: list, index: -1)
end

def (iterator is ListIterator) current
    iterator list[iterator index]
end

def (iterator is ListIterator) next
    iterator index = iterator index + 1
    iterator index < iterator list count
end
