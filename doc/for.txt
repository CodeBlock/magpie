if you call "for" on an arbitrary object, it should call Iterate on
that object, then iterate on the returned (presumed) iterator.

if you call "for" on a function, it should call the function, then
iterate on the returned (presumed) iterator.

if you call "for" on an iterator, it should just iterate through it.


q: how do you distinguish the first and third cases?

in base, define:

struct IteratorMethods'(TIterator, TItem)
    Iterator    Iterator
    Current     (TIterator -> TItem)
    MoveNext    (TIterator -> Bool)
end

then, the cases are:

1. if you call "for" on an object of type IteratorMethods, then
   iterate using that directly.
   
2. if you call "for" on a function, call it and expect to get back a
   value of type IteratorMethods.
   
3. if you call "for" on an object of any other type, call Iterate on
   it, and expect to get back a value of type IteratorMethods.

q: this still means that for case 3, calling Iterate is essentially a
   duck-typed blind call. is there a way to say "objects used in a
   for loop must implement interface IIterator?"

the iterator "interface":

interface Iterator, Item
    Current (Iterator -> Item)
    MoveNext (Iterator -> Bool)
end


implemented by Range^:

struct Range^
            Max     Int
    mutable Current Int
end

MoveNext (iter Range^ -> Bool)
    iter.Current <- + 1
    iter.Current < iter.Max
end

implement Iterator : Range^, Item : Int
