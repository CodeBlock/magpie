// what's hard/bad about keyword args?
// 1. figuring out if the first arg is before the first keyword
//    (smalltalk style) or after (magpie style). before makes it
//    nicer to use them as regular functions on objects:
//    list add: value
//    after makes it fit magpie conventions (func before arg) and
//    makes it more natural for flow control type stuff:
//    if: condition then: action
// 2. using it for open-ended flow control structures (i.e. match
//    or switch where you have n clauses). if we get rid of match
//    completely, this goes away. even if not, match will have to
//    be "special". i don't think there's any way to do local name
//    binding using just a keyword function.
// 3. handling distinction between if:then: and if:then:else. looking
//    below, i don't think this is actually an issue. i think
//    smalltalk's rule of "continue reading keywords as far as
//    possible" will disambiguate this.
// 4. having both keyword funcs and tuples means there's two ways to
//    define a multi-arg function. which is right?
// 5. how do we have a multi-line then: block without required "end"
//    before the "else:"?

if: if: true then: true else: false   // how is this parsed?
if: (if: true then: true) else: false // no
if: (if: true then: true else: false) // yes

if: true then:
    Print foo
    Print bar
end else: // <- this is gross :(
    Print bar
    Print foo
end

add: value to: list

list (add: value)


use file <- Open ("file.txt") do

end

list.Add(value)
list <Add value
list << value

Find (dict, "key")
dict .Find. "key"

dict Find: "key"

dict add-key: "key" value: 1234

