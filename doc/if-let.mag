// there are two general kinds of flow control: jumping forward, and
// jumping back. jumping back is covered by loops which are now
// unified into a single loop construct with while and for clauses.
// jumping forward is handled by conditionals.
//
// where loops all share the use of the 'do' keyword, conditionals
// share 'then'. there are two types of conditionals, 'if' and 'let'.

// an if conditional evaluates an expression. if true, it executes
// the expression after 'then':
if 1 < 2 then Print "of course"

// a let conditional evaluates an expression that returns an option
// of some type. if the result is None, the expression is skipped.
// otherwise, the value is bound to a value and the expression is
// executed:

// division operator that handles division by zero
/safe (numerator Int, divisor Int -> Option'Int)
    if divisor = 0 then None'Int else Some (numerator / divisor)
end

let ratio <- 123 /safe 432 then
    Print "divisor isn't zero!"
else
    Print "divide by zero!"
end


let a <- Foo then
    Bar
end

def a__ <- Foo
if a__.Some? then
    def a <- a.SomeValue
    Bar
end
