Types
- Classes
  - If we're going to keep inheritance, then we need to make sure you can't add
    a method to a sub- or super-class whose argument or return type is 
    incompatible with an overridden method elsewhere in the hierarchy. (i.e. you
    shouldn't be able to have Base foo(-> Int) and Derived foo(-> String)).
  - Need to type-check that a class's declared fields are all definitely values
    of allowed types by the end of the ctor.
  - Figure out if there's some way constructors can be extended to a) add new
    construction logic and/or b) add new fields.
  - Masquerades. Two classes cannot implicitly duck type to each other even if 
    they have matching methods. However, there should be a "masquerade" function
    that will take an instance of one class and return it typed to another if
    they have compatible methods. This will allow things like mocks without
    forcing users to make everything an interface up front.
  - Figure out how to type-check defined (not declared) fields.
- Interfaces
  - Declarative syntax to extend an interface.
  - Determine if something like C#'s explicit interface implementation is
    useful. It may be nice for cases where a class implements multiple
    interfaces with overlapping names.
  - Figure out how what happens if an interface references itself, like:
    interface Foo
        do(foo Foo)
    end
    Does the type-checker stack overflow when testing a type against that?
- Generics
  - Figure out variance for instantiated types.
  - Get them working with classes and objects. If you instantiate a generic
    *class*, how do methods see the static arguments on the class?
  - Get constraints working.
- Function types
  - These need an expression syntax that evaluates to an ICallable interface
    with type arguments for the function's argument and return types.
- Unions
  - Unlike or types, these would have named cases.
- Enums
  - Interfaces may cover this, but it might be nice to have some syntactic sugar
    for it. Java's system where enums are essentially singleton instances is
    interesting.

Expressions
- Scope guards
  - Basically destructors, or some other way to execute code at the close of a
    local scope. See also: using() in C#.
- Closures
  - In theory, they're there and work, but they need tests and probably have 
    lots of bugs.
- Floats, characters, and other atomic types
  - Pretty much the full suite of what Java provides.

Syntax
- Function literals
  - The syntax for these is kind of verbose, especially for use cases like
    filter/map. A shorter lambda syntax would be nice.
- Some kind of message cascade syntax? User-defined operators can handle most
  cases (i.e. a string builder in Magpie could just have a + operator), but it
  may be nice for some things?
- Map and/or set literals?
- Pattern-matching or switch?
- Parsewords
  Everything but the core message syntax should be moved out of Java into 
  Magpie. In Magpie, you can register a parseword, a name keyword. When the
  parser encounters that keyword, it calls a Magpie function that takes a parser
  and returns an expression. Then things like if, for, class, etc. can be
  implemented in Magpie. Users can then implement their own custom control
  structures.
- Annotations
  Users should be able to attach annotations, arbitrary expressions attached to
  other expressions. Those are executed and bound to the expression at check
  time and runtime. There should then be an API to access those annotations.
- Syntax literals and quasiquoting
  An expression like { a + b } evaluates to a data structure for the AST. Useful
  for metaprogramming and parsewords.
  
Library
- Reorganize and clean up the type stuff.
- Conversion and casting methods (is, as, explicit cast).

Other
- Bytecode compiler. Will make coroutines and TCO simpler.
- A well-defined package/import/namespace system including nice syntax.
- Interop with Java.
  + Call Java methods on primitive types.
  - Wrap arbitrary Java objects in Magpie objects.
  - Automatically Magpie class to match Java class?
  - Construct instances of arbitrary Java classes.
- Coroutines and/or CSP-style concurrency. Some way to easily hop between
  different callstacks, basically.
- TCO.
- Exceptions. (Or, ideally, something closer to CL's condition system.)
- Implement test infrastructure in Magpie (at least for as much as possible).
- Write build scripts in Magpie.
- Call methodNotFound on an object if method lookup failed so it can dynamically
  resolve missing methods.

Done
+ Object literals?
+ Keyword arguments. Something like:
    dictionary add(key: 123 value: "hey")
  (Just pass an object literal)
- Interfaces
  + Core imperative system to create and extend them.
  + Typing rules for them that allow other types to be assignable to them if 
    they implement all of its methods.
  + Declarative syntax to create an interface.
