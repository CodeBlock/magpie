Major features:
- Modules.
- Refine pattern syntax. The current way of specifying type and value patterns
  is gross. Need to investigate first-class or extensible patterns.
- Annotations. In order to be able to bolt on a type system later, this will be
  necessary. Structured documentation (i.e. method comments) should in turn be
  implemented using this.
- Get the extensible syntax stuff working again, including quotations.
- Concurrency. To avoid shared state, I'll have to figure out how this interacts
  with closures, so it will likely be necessary to do modules first.

Minor features:
- String interpolation.
- Cascade syntax?
- "and" and "or".
- Doubles and other atomic types.
- Dictionaries.
- Enums. Need to figure out the basic pattern for enum-like things. This is
  important because it may have implications for pattern syntax so you can match
  on enum values.

Implementation:
- Compile to bytecode. This will make tail call elimination easier, help with
  concurrency, possibly allow restartable conditions, and maybe even make it
  faster. Given quotations and first-class syntax, it may make sense to self-
  host the compiler.
- Ability to talk to Java code.

Community:
- Write Magpie guide.
- Announce.
