class AndExpression
    shared def new(left Expression, right Expression -> OrExpression)
        construct(left: left, right: right)
    end
        
    get string String =
        left string ~ " and " ~ right string
    end
    
    var left  Expression
    var right Expression
end

class ApplyExpression
    shared def new(target Expression, argument Expression -> ApplyExpression)
        construct(target: target, argument: argument)
    end
    
    get string String =
        target string ~ "(" ~ argument string ~ ")"
    end
    
    var target Expression
    var argument Expression
end

class AssignExpression
    shared def new(receiver Expression | Nothing,
                   name String,
                   value Expression -> AssignExpression)
        construct(receiver: receiver, name: name, value: value)
    end
        
    get string String =
        let receiver then
            receiver string ~~ name ~ " = " ~ value string
        else
            name ~ " = " ~ value string
        end
    end
    
    var receiver Expression | Nothing
    var name     String
    var value    Expression
end

class BoolExpression
    shared def new(value Bool -> BoolExpression) construct(value: value)
    
    get string String = value string

    var value Bool
end

class BlockExpression
    shared def new(expressions List(Expression) -> BlockExpression)
        construct(expressions: expressions)
    end
    
    get string String = String join(expressions, "\n")
    
    var expressions List(Expression)
end

class BreakExpression
    get string String = "break"
end

class ExpressionExpression
    shared def new(body Expression -> ExpressionExpression)
        construct(body: body)
    end
        
    get string String =
        "{ " ~ body string ~ " }"
    end
    
    var body Expression
end

class FunctionExpression
    shared def new(type FunctionTypeExpression, body Expression ->
                   FunctionExpression)
        construct(type: type, body: body)
    end
        
    get string String = "fn " ~ type ~~ body
    
    var type FunctionTypeExpression
    var body Expression
end

class IfExpression
    shared def new(name String | Nothing,
                   condition Expression,
                   thenArm Expression,
                   elseArm Expression -> IfExpression)
        construct(name: name, condition: condition,
                  thenArm: thenArm, elseArm: elseArm)
    end
    
    get let? Bool = name != nothing
    
    get string String =
        if let? then
            "let " ~ name ~ " "
        else
            "if "
        end ~ condition ~ " then " ~ thenArm ~ " else " ~ elseArm
    end
    
    var name String | Nothing
    var condition Expression
    var thenArm   Expression
    var elseArm   Expression
end

class IntExpression
    shared def new(value Int -> IntExpression) construct(value: value)
    
    get string String = value string
    
    var value Int
end

class LoopExpression
    shared def new(conditions List(Expression), body Expression ->
                   LoopExpression)
        construct(conditions: conditions, body: body)
    end
    
    get string String =
        var result = ""
        for i = 0 until(conditions count)
        for condition = conditions do
            result = result ~ "while " ~ condition
      
            if i < (conditions count - 1) then
                result = result ~ "\n"
            else
                result = result ~ " do\n"
            end
        end
        result ~ body
    end
    
    var conditions List(Expression)
    var body       Expression
end

class MessageExpression
    shared def new(receiver Expression | Nothing,
                   name String -> MessageExpression)
        construct(receiver: receiver, name: name)
    end
        
    get string String =
        let receiver then receiver string ~~ name else name
    end
    
    var receiver Expression | Nothing
    var name     String
end

class NothingExpression
    get string String = "nothing"
end

class OrExpression
    shared def new(left Expression, right Expression -> OrExpression)
        construct(left: left, right: right)
    end
        
    get string String =
        left string ~ " or " ~ right string
    end
    
    var left  Expression
    var right Expression
end

class ReturnExpression
    shared def new(value Expression -> ReturnExpression)
        construct(value: value)
    end
        
    get string String = "return " ~ value
    
    var value Expression
end

class ScopeExpression
    shared def new(body Expression -> ScopeExpression)
        construct(body: body)
    end
        
    get string String = "do " ~ body
    
    var body Expression
end

class StringExpression
    shared def new(value String -> StringExpression) construct(value: value)
    
    get string String = "\"" ~ value ~ "\""

    var value String
end

class ThisExpression
    get string String = "this"
end

class TupleExpression
    shared def new(fields List(Expression) -> TupleExpression)
        construct(fields: fields)
    end
    
    get string String = String join(fields)
    
    var fields List(Expression)
end

class TypeofExpression
    shared def new(body Expression -> TypeofExpression)
        construct(body: body)
    end
        
    get string String = "typeof " ~ body
    
    var body Expression
end

class UnsafeCastExpression
    shared def new(type Expression, value Expression -> UnsafeCastExpression)
        construct(type: type, value: value)
    end
        
    get string String = "unsafecast[" ~ type ~ "](" ~ value ~ ")"
    
    var type  Expression
    var value Expression
end

class VariableExpression
    shared def new(name String, value Expression -> VariableExpression)
        construct(name: name, value: value)
    end
    
    get string String =
        "var " ~ name ~ " = " ~ value string
    end

    var name  String
    var value Expression
end