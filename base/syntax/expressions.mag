// Note: This file is parsed before any of the parsewords have been defined, so
// it only uses core syntax.

// Define the bare minimum needed by the parsers since this must all be in core
// syntax. Once the parsers are loaded, we'll extend these classes with other
// stuff.

class AndExpression
    shared def new(left Expression, right Expression -> OrExpression)
        construct(left: left, right: right)
    end
end

AndExpression declareField("left", false, fn Expression)
AndExpression declareField("right", false, fn Expression)

class ApplyExpression
    shared def new(target Expression, typeArgs List(Expression),
            argument Expression -> ApplyExpression)
        construct(target: target, typeArgs: typeArgs, argument: argument)
    end
end

ApplyExpression declareField("target", false, fn Expression)
ApplyExpression declareField("typeArgs", false, fn List(Expression))
ApplyExpression declareField("argument", false, fn Expression)

class AssignExpression
    shared def new(receiver Expression | Nothing,
                   name String,
                   value Expression -> AssignExpression)
        construct(receiver: receiver, name: name, value: value)
    end
end

AssignExpression declareField("receiver", false, fn Expression | Nothing)
AssignExpression declareField("name", false, fn String)
AssignExpression declareField("value", false, fn Expression)

class BoolExpression
    shared def new(value Bool -> BoolExpression) construct(value: value)
end

BoolExpression declareField("value", false, fn Bool)

class BlockExpression
    shared def new(expressions List(Expression), catchExpression Expression ->
            BlockExpression)
        construct(expressions: expressions, catchExpression: catchExpression)
    end
end

BlockExpression declareField("expressions", false, fn List(Expression))
BlockExpression declareField("catchExpression", false, fn Expression | Nothing)

class BreakExpression
end

class FunctionExpression
    shared def new(type FunctionTypeExpression, body Expression ->
                   FunctionExpression)
        construct(functionType: type, body: body)
    end
end

FunctionExpression declareField("functionType", false, fn FunctionTypeExpression)
FunctionExpression declareField("body", false, fn Expression)

class IfExpression
    shared def new(name String | Nothing,
                   condition Expression,
                   thenArm Expression,
                   elseArm Expression -> IfExpression)
        construct(name: name, condition: condition,
            thenArm: thenArm, elseArm: elseArm)
    end
end

IfExpression declareField("name", false, fn String | Nothing)
IfExpression declareField("condition", false, fn Expression)
IfExpression declareField("thenArm", false, fn Expression)
IfExpression declareField("elseArm", false, fn Expression)

class IntExpression
    shared def new(value Int -> IntExpression) construct(value: value)
end

IntExpression declareField("value", false, fn Int)

class LoopExpression
    shared def new(body Expression -> LoopExpression)
        construct(body: body)
    end
end

LoopExpression declareField("body", false, fn Expression)

class MatchCase
    shared def new(pattern Pattern, body Expression -> MatchCase)
        construct(pattern: pattern, body: body)
    end
end

MatchCase declareField("pattern", false, fn Pattern)
MatchCase declareField("body", false, fn Expression)

class MatchExpression
    shared def new(value Expression, cases List(MatchCase) -> MatchExpression)
        construct(value: value, cases: cases)
    end
end

MatchExpression declareField("value", false, fn Expression)
MatchExpression declareField("cases", false, fn List(MatchCase))

class MessageExpression
    shared def new(receiver Expression | Nothing,
                   name String -> MessageExpression)
        construct(receiver: receiver, name: name)
    end
end

MessageExpression declareField("receiver", false, fn Expression | Nothing)
MessageExpression declareField("name", false, fn String)

class NothingExpression
end

class OrExpression
    shared def new(left Expression, right Expression -> OrExpression)
        construct(left: left, right: right)
    end
end

OrExpression declareField("left", false, fn Expression)
OrExpression declareField("right", false, fn Expression)

class QuotationExpression
    shared def new(body Expression -> QuotationExpression)
        construct(body: body)
    end
end

QuotationExpression declareField("body", false, fn Expression)

class RecordExpression
    shared def new(fields List(String, Expression) -> RecordExpression)
        construct(fields: fields)
    end
end

RecordExpression declareField("fields", false, fn List(String, Expression))

class ReturnExpression
    shared def new(value Expression -> ReturnExpression)
        construct(value: value)
    end
end

ReturnExpression declareField("value", false, fn Expression)

class ScopeExpression
    shared def new(body Expression -> ScopeExpression)
        construct(body: body)
    end
end

ScopeExpression declareField("body", false, fn Expression)

class StringExpression
    shared def new(value String -> StringExpression) construct(value: value)
end

StringExpression declareField("value", false, fn String)

class ThisExpression
end

class TupleExpression
    shared def new(fields List(Expression) -> TupleExpression)
        construct(fields: fields)
    end
end

TupleExpression declareField("fields", false, fn List(Expression))

class TypeofExpression
    shared def new(body Expression -> TypeofExpression)
        construct(body: body)
    end
end

TypeofExpression declareField("body", false, fn Expression)

class UnsafeCastExpression
    shared def new(type Expression, value Expression -> UnsafeCastExpression)
        construct(type: type, value: value)
    end
end

UnsafeCastExpression declareField("type", false, fn Expression)
UnsafeCastExpression declareField("value", false, fn Expression)

class VariableExpression
    shared def new(pattern Pattern, value Expression -> VariableExpression)
        construct(pattern: pattern, value: value)
    end
end

VariableExpression declareField("pattern", false, fn Pattern)
VariableExpression declareField("value", false, fn Expression)
