// Outside of a class expression (which handles "def") directly, a def can
// have a couple of forms:
//
//    def foo(a) ...     // defines a local function "foo"
//    def Bar foo(a) ... // defines a method "foo" on class "Bar"
//    def (a b) foo(a) ... // defines a method "foo" on the result of "a b"
class DefParser
    def parse(parser MagpieParser -> Expression)
        parser consume("def")

        %if%(parser lookAhead(TokenType identifier, TokenType leftParen) or
            parser lookAhead(TokenType identifier, TokenType leftBracket) or
            parser lookAhead(TokenType operator, TokenType leftParen) or
            parser lookAhead(TokenType operator, TokenType leftBracket), do
                // Local function.
                %var%("name", parser consume() stringValue)

                // Parse the function.
                %var%("function", parser parseFunction())

                VariableExpression new(pattern: VariablePattern new(name, nothing),
                    value: function)
            end, do
                %var%("receiver", parseReceiver(parser))
                %var%("name", parser consumeAny(TokenType identifier,
                    TokenType operator) stringValue)
                %var%("function", parser parseFunction())

                { `receiver defineMethod(`name, `function) }
            end
        )
    end
end

MagpieParser registerParseword("def", DefParser new())
// TODO(bob): Not sure why this is registering "shared" but the old Java one
// did.
MagpieParser registerParseword("shared", DefParser new())
