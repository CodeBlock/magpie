// Note: This file is parsed before any of the parsewords have been defined, so
// it only uses core syntax.

class Token
end

Token defineGetter("string", fn(-> String) tokenType ~~ value)

Token defineGetter("boolValue", fn(-> Bool) %unsafecast%(Bool, value))
Token defineGetter("intValue", fn(-> Int) %unsafecast%(Int, value))
Token defineGetter("stringValue", fn(-> String) %unsafecast%(String, value))
Token declareField("position", false, { Position })
Token declareField("tokenType", false, { TokenType })
Token declareField("value", false, { Bool | Int | Nothing | String })

Token defineMethod("keyword?",
    // Note: no comparison operators are available yet.
    fn(keyword String -> Bool)
        TokenType equal?(tokenType, TokenType identifier) and
        Int equal?(stringValue compareTo(keyword), 0)
    end)

class TokenType
    shared def equal?(left TokenType, right TokenType -> Bool)
        Int equal?(left value, right value)
    end

    shared def new(value Int, name String) construct(value: value, name: name)
end

TokenType defineGetter("string", fn(-> String) name)
TokenType declareField("value", false, { Int })
TokenType declareField("name", false, { String })

do
    %var%("defToken", fn(name String, value Int)
        Reflect getClass(TokenType) defineGetter(name,
            fn(-> TokenType) TokenType new(value, name))
    end)
    defToken("leftParen",     0)
    defToken("rightParen",    1)
    defToken("leftBracket",   2)
    defToken("rightBracket",  3)
    defToken("leftBrace",     4)
    defToken("rightBrace",    5)
    defToken("comma",         6)
    defToken("dot",           7)
    defToken("equals",        8)
    defToken("line",          9)
    // TODO(bob): Ideally, this token type would be called "name", but that collides
    // with the "name" getter on the class itself. if we move getting a class name
    // out of the class and into Reflect, we can change this to "name" here.
    defToken("identifier",    10)
    defToken("field",         11)
    defToken("operator",      12)
    defToken("boolLiteral",   13)
    defToken("intLiteral",    14)
    defToken("stringLiteral", 15)
    defToken("eof",           16)
end
