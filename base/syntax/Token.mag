// Note: This file is parsed before any of the parsewords have been defined, so
// it only uses core syntax.

class Token
    get string String = tokenType ~~ value
    
    // Using unsafecast here because "as" hasn't been defined yet.
    get boolValue   Bool   = unsafecast[Bool](value)
    get intValue    Int    = unsafecast[Int](value)
    get stringValue String = unsafecast[String](value)
    
    shared get leftParen     Token = Token new(TokenType leftParen)
    shared get rightParen    Token = Token new(TokenType rightParen)
    shared get leftBracket   Token = Token new(TokenType leftBracket)
    shared get rightBracket  Token = Token new(TokenType rightBracket)
    shared get leftBrace     Token = Token new(TokenType leftBrace)
    shared get rightBrace    Token = Token new(TokenType rightBrace)
    shared get comma         Token = Token new(TokenType comma)
    shared get dot           Token = Token new(TokenType dot)
    shared get equals        Token = Token new(TokenType equals)
    shared get line          Token = Token new(TokenType line)
    
    shared def name(name String -> Token) Token new(TokenType name, name)
    shared def field(name String -> Token) Token new(TokenType field, name)
    shared def operator(name String -> Token) Token new(TokenType operator, name)
    shared def boolLiteral(value Bool -> Token) Token new(TokenType boolLiteral, value)
    shared def intLiteral(value Int -> Token) Token new(TokenType intLiteral, value)
    shared def stringLiteral(value String -> Token) Token new(TokenType stringLiteral, value)
end

Token declareField("tokenType", false, fn TokenType)
Token declareField("value", false, fn Bool | Int | Nothing | String)

class TokenType
    shared def equal?(left TokenType, right TokenType)
        left value == right value
    end
    
    shared def new(value Int, name String) construct(value: value, name: name)
    
    shared get leftParen     TokenType = TokenType new(0, "leftParen")
    shared get rightParen    TokenType = TokenType new(1, "rightParen")
    shared get leftBracket   TokenType = TokenType new(2, "leftBracket")
    shared get rightBracket  TokenType = TokenType new(3, "rightBracket")
    shared get leftBrace     TokenType = TokenType new(4, "leftBrace")
    shared get rightBrace    TokenType = TokenType new(5, "rightBrace")
    shared get comma         TokenType = TokenType new(6, "comma")
    shared get dot           TokenType = TokenType new(7, "dot")
    shared get equals        TokenType = TokenType new(8, "equals")
    shared get line          TokenType = TokenType new(9, "line")
    shared get name          TokenType = TokenType new(10, "name")
    shared get field         TokenType = TokenType new(11, "field")
    shared get operator      TokenType = TokenType new(12, "operator")
    shared get boolLiteral   TokenType = TokenType new(13, "boolLiteral")
    shared get intLiteral    TokenType = TokenType new(14, "intLiteral")
    shared get stringLiteral TokenType = TokenType new(15, "stringLiteral")

    get string String = name
end

TokenType declareField("value", false, fn Int)
TokenType declareField("name", false, fn String)
