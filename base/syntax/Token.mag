class Token
    get string String = tokenType ~~ value
    
    var tokenType TokenType
    var value     Bool | Int | Nothing | String
end

class TokenType
    shared def equal?(left TokenType, right TokenType)
        left value == right value
    end
    
    get string String = name
    
    var value Int
    var name  String
end

// Turn TokenType in an enum-like class by defining a bunch of shared getters on
// it that return instances of TokenType. This way, you can do "TokenType dot"
// and get back the dot TokenType.
do
    var types = ("leftParen rightParen leftBracket rightBracket leftBrace " ~
                "rightBrace comma dot equals name field operator boolLiteral " ~
                "intLiteral stringLiteral") split(" ")
    for type = types
    for i = 0 to(types count) do
        // Define a TokenType "enum" for the type.
        var tokenType = TokenType new(name: type, value: i)
        Reflect getClass(TokenType) defineGetter(type,
                fn(-> TokenType) tokenType)
        
        // Also make a Token constructor for it.
        var tokenMetaclass = Reflect getClass(Token)
        if type == "boolLiteral" then
            // Define a Token constructor that takes a Bool value.
            tokenMetaclass defineMethod(type, fn(value Bool -> Token)
                Token new(tokenType: tokenType, value: value)
            end)
        else if type == "intLiteral" then
            // Define a Token constructor that takes an Int value.
            tokenMetaclass defineMethod(type, fn(value Int -> Token)
                Token new(tokenType: tokenType, value: value)
            end)
        else if "name field operator stringLiteral" contains?(type) then
            // Define a Token constructor that takes a String value.
            tokenMetaclass defineMethod(type, fn(value String -> Token)
                Token new(tokenType: tokenType, value: value)
            end)
        else
            // Token doesn't have a value, so just define a getter to return a
            // singleton instance of it.
            var token = Token new(tokenType: tokenType)
            tokenMetaclass defineGetter(type, fn(-> Token) token)
        end
    end
end
