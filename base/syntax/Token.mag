// Note: This file is parsed before any of the parsewords have been defined, so
// it only uses core syntax.

class Token
end

Token defineGetter("boolValue", fn value)
Token defineGetter("intValue", fn value)
Token defineGetter("stringValue", fn value)
Token declareField("position", { Position })
Token declareField("tokenType", { TokenType })
Token declareField("value",
    { OrType combine(OrType combine(OrType combine(Bool, Int), Nothing), String) })

Token defineMethod("keyword?",
    // Note: no comparison operators are available yet.
    fn(keyword String)
        // TODO(bob): Error here. We haven't defined the "and" parser yet.
        TokenType equal?(tokenType, TokenType identifier) and
        Int equal?(stringValue compareTo(keyword), 0)
    end)

class TokenType
end

def shared TokenType equal?(left TokenType, right TokenType)
    Int equal?(left value, right value)
end

def shared TokenType new(value Int, name String) construct(value: value, name: name)

TokenType defineGetter("string", fn name)
TokenType declareField("value", { Int })
TokenType declareField("name", { String })

do
    var defToken = fn(name String, value Int)
        Reflect getClass(TokenType) defineGetter(name,
            fn TokenType new(value, name))
        end

    defToken("leftParen",     0)
    defToken("rightParen",    1)
    defToken("leftBracket",   2)
    defToken("rightBracket",  3)
    defToken("leftBrace",     4)
    defToken("rightBrace",    5)
    defToken("colon",         6)
    defToken("comma",         7)
    defToken("dot",           8)
    defToken("line",          9)
    // TODO(bob): Ideally, this token type would be called "name", but that
    // collides with the "name" getter on the class itself. if we namespace
    // "name" in Class, that will fix this.
    defToken("identifier",    10)
    defToken("field",         11)
    defToken("boolLiteral",   12)
    defToken("intLiteral",    13)
    defToken("stringLiteral", 14)
    defToken("eof",           15)
end
