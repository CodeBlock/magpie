// Keyword parser for standalone "get" expressions.
class GetParser
    def parse(parser MagpieParser -> Expression)
        // Outside of a class expression (which handles "get") directly, a get can
        // have a couple of forms:
        //
        //    get Bar foo Int = ... // defines a getter "foo" on class "Bar"
        //    get (a b) foo Int = ... // defines a getter "foo" on the result of "a b"
        parser consume("get")
    
        %var%("receiver", parseReceiver(parser))
        %var%("name", parser consume(TokenType identifier) stringValue)
        %var%("valueType", %if%(parser lookAheadAny(TokenType equals, TokenType line),
            { Dynamic },
            parser parseTypeExpression()))
        
        %var%("type", FunctionTypeExpression new(
            %unsafecast%(List(String), Array of()),
            { Nothing }, valueType, false))
    
        parser consume(TokenType equals)
        %var%("body", parser parseEndBlock())
        %var%("function", FunctionExpression new(type, body))
        { `receiver defineGetter(`(StringExpression new(name)), `function ) }
    end
end

MagpieParser registerParseword("get", GetParser new())
