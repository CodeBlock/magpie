// Keyword parser for standalone "get" expressions.
class GetParser
    def parse(parser MagpieParser, token Token -> Expression)
        // Outside of a class expression (which handles "get") directly, a get can
        // have a couple of forms:
        //
        //    get Bar foo Int = ... // defines a getter "foo" on class "Bar"
        //    get (a b) foo Int = ... // defines a getter "foo" on the result of "a b"
        var receiver = parseReceiver(parser)
        var name = parser consume(TokenType identifier) stringValue
        var valueType =
            match parser lookAheadAny(TokenType equals, TokenType line)
                case true then { Dynamic }
                else parser parseTypeExpression()
            end
        end

        var type = FunctionTypeExpression new(
            typeParams: %unsafecast%(List(String, Expression), Array of()),
            pattern:    ValuePattern new({ nothing }),
            returnType: valueType)

        parser consume(TokenType equals)
        var body = parser parseEndBlock()
        var function = FunctionExpression new(functionType: type, body: body)
        { `receiver defineGetter(`name, `function ) }
    end
end

MagpieParser registerPrefixParser("get", GetParser new())
