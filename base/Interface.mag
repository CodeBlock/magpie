// Defines interface types. An interface is a collection of named typed methods.
// Interfaces are duck-typed like Go: any type that has methods with the names
// of the members in the interface with matching types, then that type
// implicitly implements the interface.

class Interface
    this(name String)
        this name = name
        this members = Array new()
    end
    
    |(other Type -> Type)
        OrType combine(this, other)
    end

    declareMember(name String, type Function(Nothing, Type) ->)
        members add(Member new(name, type))
    end

    canAssignFrom(other Type -> Bool)
        // An interface can always assign from itself. This is critical to
        // allow an interface that references itself in a member from causing a
        // stack overflow during checking.
        if other == this then return true

        for member = members do
            var type = member memberType()
            let otherMember = other getMemberType(member name) then
                // Must be assignable.
                if type canAssignFrom(otherMember) not then
                    return false
                end
            else
                // Must have members
                return false
            end
        end
    
        // If we got here, every method was found and matched.
        true
    end

    getMemberType(name String -> Type | Nothing)
        let member = members first(fn (m Member -> Bool) m name == name) then
            member memberType()
        else
            // No method by that name
            nothing
        end
    end

    getSetterType(name String -> Type | Nothing)
        // No setters in interfaces yet.
        nothing
    end

    name    String
    members ArrayType new(Member)
end

Interface defineGetter("string", fn(-> String) name)

class Member
    this(name String, type Function(Nothing, Type))
         this name = name
         this memberType = type
    end

    name       String
    memberType Function(Nothing, Type)
end

Member defineGetter("string", fn(-> String)
    name + " " + memberType() string
end)