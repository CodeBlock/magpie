// Defines interface types. An interface is a collection of named typed methods.
// Interfaces are duck-typed like Go: any type that has methods with the names
// of the members in the interface with matching types, then that type
// implicitly implements the interface.

class Interface
    this(name String) =
        this name = name
        this members = Array new()
    end
    
    get string String = name

    def declareMethod(name String, type Function(Nothing, Type) ->) =
        members add(Member new(name, type))
    end
    
    def declareGetter(name String, type Function(Nothing, Type) ->) =
        members add(Member new(name, type))
    end

    def canAssignFrom(other Type -> Bool) =
        // An interface can always assign from itself. This is critical to
        // allow an interface that references itself in a member from causing a
        // stack overflow during checking.
        if other == this then return true

        for member = members do
            var type = member memberType()
            let otherMember = other getMemberType(member name) then
                // Must be assignable.
                if type canAssignFrom(otherMember) not then
                    print(other string + " does not implement " + name +
                        " because " + member name + " is the wrong type")
                    print("expected " + type + " but got " + otherMember)
                    return false
                end
            else
                print(other string + " does not implement " + name +
                    " because it lacks " + member name)
                return false // Must have members
            end
        end
    
        // If we got here, every method was found and matched.
        true
    end

    def getMemberType(name String -> Type | Nothing) =
        let member = members first(fn (m Member -> Bool) m name == name) then
            member memberType()
        end
    end

    def getSetterType(name String -> Type | Nothing) =
        // No setters in interfaces yet.
        nothing
    end

    var name    String
    var members ArrayType new(Member)
end

class Member
    this(name String, type Function(Nothing, Type)) =
         this name = name
         this memberType = type
    end

    get string String = name + " " + memberType()
    
    var name       String
    var memberType Function(Nothing, Type)
end
