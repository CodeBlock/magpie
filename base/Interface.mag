// Defines interface types. An interface is a collection of named typed methods.
// Interfaces are duck-typed like Go: any type that has methods with the names
// of the members in the interface with matching types, then that type
// implicitly implements the interface.

class Interface
    shared def new(name String -> Interface)
        construct(name: name)
    end
    
    get string String = name

    def declareMethod(name String, type Nothing => Type ->)
        members add(Member new(name: name, memberType: type))
    end
    
    def declareGetter(name String, type Nothing => Type ->)
        members add(Member new(name: name, memberType: type))
    end

    def assignsFrom?(other Type -> Bool)
        // An interface can always assign from itself. This is critical to
        // allow an interface that references itself in a member from causing a
        // stack overflow during checking.
        if other == this then return true

        for member = members do
            var type = member memberType()
            var otherType = other getMemberType(member name)
            // Must be assignable.
            if type assignsFrom?(otherType) not then
                print(other string + " does not implement " + name +
                    " because " + member name + " is the wrong type")
                print("expected " + type + " but got " + otherType)
                return false
            end
        end
    
        // If we got here, every method was found and matched.
        true
    end

    def getMemberType(name String -> Type)
        let member = members first(fn (m Member -> Bool) m name == name) then
            member memberType()
        else
            // Every instance of an interface is also an object, so support its
            // methods too.
            Object getMemberType(name)
        end
    end

    var name    String
    var members List(Member) = Array new()
end

class Member
    get string String = name + " " + memberType()
    
    var name       String
    var memberType Nothing => Type
end
