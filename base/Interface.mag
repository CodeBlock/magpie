// Defines interface types. An interface is a collection of named typed methods.
// Interfaces are duck-typed like Go: any type that has methods with the names
// of the members in the interface with matching types, then that type
// implicitly implements the interface.

class Interface
    shared def new(name String -> Interface)
        construct(name: name)
    end

    get string String = name

    def declareMethod(name String, type Nothing => Type ->)
        members add(Member new(name: name, memberType: type))
    end

    def declareGetter(name String, type Nothing => Type ->)
        members add(Member new(name: name, memberType: type))
    end

    def assignsFrom?(other Type -> Bool)
        // An interface can always assign from itself.
        // TODO(bob): Since all types should do this check, would be good to
        // move this to a higher level of evaluation. Either in the interpreter
        // itself or in a standard "assignsFrom?" function that type-checking
        // goes through.
        if other == this then return true

        // Make sure we aren't currently type-checking this type against this
        // interface. If we are, just return true. This handles interfaces that
        // refer to themselves, like:
        // interface Foo
        //     get bar Foo
        // end
        // class SomeClass
        //     get bar SomeClass
        // end
        for checkingType = checking do
            if Reflect same?(other, checkingType) then return true
        end

        // See if the type implements all of the interface's members.
        checking add(other)

        var implements = true
        for member = members do
            var thisType = member memberType()
            var otherType = other getMemberType(member name)

            // Must be assignable.
            if thisType assignsFrom?(otherType) not then
                /*
                print(other ~ " does not implement " ~ name ~ " because " ~
                    member name ~ " is the wrong type")
                */
                implements = false
                break
            end
        end

        // We aren't checking this type anymore.
        checking removeAt(-1)
        implements
    end

    def getMemberType(name String -> Type)
        let member = members first(fn (m Member -> Bool) m name == name) then
            member memberType()
        else
            // Every instance of an interface is also an object, so support its
            // methods too.
            Object getMemberType(name)
        end
    end

    var name     String
    var members  List(Member) = Array new()
    var checking List(Type) = Array new()
end

class Member
    get string String = name ~~ memberType()

    var name       String
    var memberType Nothing => Type
end
