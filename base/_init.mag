def (_ String) string
    this
end

def (nothing) string
    "nothing"
end

def (true) string
    "true"
end

def (false) string
    "false"
end

def (_ Class) string
    this name
end

def print()
    prints("\n")
end

def print(text String)
    prints(text + "\n")
end

def print(any)
    print(any string)
end

def not(true)
    false
end

def not(false)
    true
end

// By default, == just does identity comparison.
def (_) == (other)
    this sameAs?(other)
end

def (_) != (other)
    not(this == other)
end

// Make + default to string concatenation. We'll only hit this if both
// arguments are not Ints.
def (_) + (other)
    this string +(other string)
end

// Truthiness.
def (_) true?
    true
end

def (_ Bool) true?
    this
end

def (_ Int) true?
    this != 0
end

def (_ String) true?
    this count > 0
end

def (nothing) true?
    false
end

// TODO(bob): Need "base." here because it uses this to determine the module
// name and a module with a given name is only loaded once. The modules here
// are colliding with the same named ones in spec. To fix this, a module's name
// should include its parent module if it was loaded from a parent-relative
// path (so "List" here would become "base.List" and the one in spec would be
// "spec.core.List").
import base.Comparable
import base.List
import base.Range
