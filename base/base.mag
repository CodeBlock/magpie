class RangeIterator
    this(start Int, stop Int)
        // rollback so the first call to next advances to the first
        current = start - 1
        this stop = stop
    end
    
    current Int
    stop    Int
end

def RangeIterator next(-> Bool)
    current = current + 1
    current <= stop
end

class Range
    this(start Int, stop Int)
        this start = start
        this stop = stop
    end
    
    start Int
    stop  Int
end
    
def Range iterate(-> RangeIterator)
    RangeIterator new(start, stop)
end

// Extend the built-in classes.
def Object !=(other -> Bool) (this == other) not

// Add generator methods on Ints.
def Int times (-> Range) Range new(0, this - 1)
def Int to (last Int -> Range) Range new(this, last)
def Int until (last Int -> Range) Range new(this, last - 1)

def String apply (index Int -> String) this at(index)

def String toString(-> String) this
def Nothing toString(-> String) "nothing"
def Class toString(-> String) name

// Provide a generic print that converts arg to string first.
def Object print(arg) printRaw(arg toString)

// Truthiness.
def Object true?(-> Bool) true
def Bool true?(-> Bool) this
def Int true?(-> Bool) this != 0
def String true?(-> Bool) this length > 0
def Nothing true?(-> Bool) false

// Type relations.

shared Nothing canAssignFrom(other IType -> Bool) other == Nothing

def Class canAssignFrom(other IType -> Bool)
    // Not even object can assign from Nothing.
    if other == Nothing then return false
    
    // A derived type can be assigned to a base type, so walk up the chain
    // looking for this type.
    while other != Object do
        if this == other then return true
        // Bail if got stuck in an infinite loop.
        if other == nothing then return false
        other = other parent
    end
    
    // If we got here, the only thing other has in common is Object, so see if
    // that's us.
    this == Object
end

def Class |(other IType -> OrType) OrType new(this, other)

class OrType
    this(left IType, right IType)
        this left = left
        this right = right
    end
    
    left  IType
    right IType
end

def OrType canAssignFrom(other IType -> Bool)
    // Either arm of the union can be assigned from
    left canAssignFrom(other) or right canAssignFrom(other)
end
