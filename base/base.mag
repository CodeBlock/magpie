import("Array.mag")
import("Function.mag")
import("Int.mag")
import("Interface.mag")
import("String.mag")
import("Tuple.mag")
import("Types.mag")
import("Type.mag")
import("OrType.mag")

// Returns the argument cast to the given type if it's type is an exact match
// and not a subtype, otherwise returns nothing.
// TODO(bob): Make this a method on Object so you can do: foo asExactly[Bar]
def asExactly[T -> Dynamic => (T | Nothing)](arg -> T | Nothing)
    if arg type == T then unsafecast[T](arg)
end

// Returns the argument cast to the given type if it can be safely assigned to
// that type, otherwise returns nothing.
// TODO(bob): Make this a method on Object so you can do: foo as[Bar]
def as[T -> Dynamic => (T | Nothing)](arg -> T | Nothing)
    var type = unsafecast[Type](arg type)
    if type == T then return unsafecast[T](arg)
    if T canAssignFrom(type) then unsafecast[T](arg)
end

def Object as[T -> T | Nothing]
    var type = unsafecast[Type](this type)
    if type == T then return unsafecast[T](this)
    if T canAssignFrom(type) then unsafecast[T](this)
end

// Add an arrow operator to make function types out of other types:
extend interface Type
    def =>(other Type -> Type)
end

def ArrayType         =>(other Type -> Type) FunctionType new(this, other, false)
def ArrayIteratorType =>(other Type -> Type) FunctionType new(this, other, false)
def Class             =>(other Type -> Type) FunctionType new(this, other, false)
def FunctionType      =>(other Type -> Type) FunctionType new(this, other, false)
def Interface         =>(other Type -> Type) FunctionType new(this, other, false)
def OrType            =>(other Type -> Type) FunctionType new(this, other, false)
def Tuple             =>(other Type -> Type) FunctionType new(this, other, false)

// Extend the built-in classes.
def Object !=(other -> Bool) (this == other) not

// Provide a generic print that converts arg to string first.
def Object print(arg Object ->) printRaw(arg string)

get Object string String = "object"
get String string String = this
get Nothing string String = "nothing"
get Class string String = name

// Truthiness.
get Object true? Bool = true
get Bool true? Bool = this
get Int true? Bool = this != 0
get String true? Bool = this count > 0
get Nothing true? Bool = false

// TODO(bob): Hack. This fixes a weird infinite regress problem. Let's say you
// have an expression like:
//
//   foo()
//
// It turns out "foo" is undefined. So when we evaluate "foo" , we fail to find
// it and return nothing. Then we try to evaluate "nothing()" (the apply).
// nothing is not a function, so that gets translated to "nothing call()". So
// we look up "call" on nothing, which fails, returning "nothing". Now we try
// to evaluate "nothing()"... stack overflow.
//
// This short-circuits that by actually making nothing callable.
def Nothing call(arg) nothing
