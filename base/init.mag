// WARNING. This file and the files it imports bootstrap low-level things like
// the type system and basic operators like == and <. The order that code is
// evaluated here is significant, and subtle.

// Implement Trueable for the built-in classes so we can evaluate conditionals.
import("true.mag")

// Import the base classes used to implement the keyword parsers.
import("syntax/Token.mag")
import("syntax/expressions.mag")
import("syntax/FunctionTypeExpression.mag")

// Register the keyword parsers. Do this here so that the full Magpie syntax is
// available when defining the rest of the stuff.
import("syntax/parsing.mag")
import("syntax/BreakParser.mag")
import("syntax/DoParser.mag")
import("syntax/DefParser.mag")
import("syntax/GetParser.mag")
import("syntax/ReturnParser.mag")
import("syntax/TypeofParser.mag")
import("syntax/UnsafeCastParser.mag")
import("syntax/VarParser.mag")

// Define the interface classes. Need to do this relatively early so that
// subsequent files can define interface types.
import("GenericInterface.mag")
import("Interface.mag")

// Define the "regular" base library stuff. This chunk should be relatively
// straightforward.
import("Array.mag")
import("Class.mag")
import("Function.mag")
import("Int.mag")
import("Record.mag")
import("String.mag")
import("Tuple.mag")
import("Type.mag")
import("operators.mag")
import("OrType.mag")
import("Error.mag")
import("Object.mag")

// Finally, import stuff that just defines interfaces since they are only used
// during type-checking.
import("Any.mag")
import("Iterator.mag")
import("List.mag")
import("Stringable.mag")
import("Trueable.mag")
import("syntax/Expression.mag")
import("syntax/KeywordParser.mag")
