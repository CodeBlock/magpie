import("Array.mag")
import("Class.mag")
import("Function.mag")
import("Int.mag")
import("Interface.mag")
import("Record.mag")
import("String.mag")
import("Tuple.mag")
import("Type.mag")
import("OrType.mag")
import("Error.mag")
import("Object.mag")
import("Stringable.mag")
import("Trueable.mag")

interface Any
end

// Add an arrow operator to make function types out of other types:
extend interface Type
    def =>(other Type -> Type)
end

def ArrayType         =>(other Type -> Type) FunctionType new(this, other, false)
def ArrayIteratorType =>(other Type -> Type) FunctionType new(this, other, false)
def Class             =>(other Type -> Type) FunctionType new(this, other, false)
def FunctionType      =>(other Type -> Type) FunctionType new(this, other, false)
def Interface         =>(other Type -> Type) FunctionType new(this, other, false)
def OrType            =>(other Type -> Type) FunctionType new(this, other, false)
def Tuple             =>(other Type -> Type) FunctionType new(this, other, false)
