// TODO(bob): Hackish. Need to figure out what the semantics for this should be.
definfix == 80 (left, right -> Bool)
    // Must be equal if they're the same object.
    if Reflect same?(left, right) then return true

    // Must be the same class.
    var leftClass = Reflect getClass(left)
    var rightClass = Reflect getClass(right)
    if Reflect same?(leftClass, rightClass) not then return false

    // Leave it up to the class to decide.
    leftClass equal?(left, right)
end

definfix != 80 (left, right -> Bool) (left == right) not

definfix < 80 (left, right -> Bool)
    // Leave it up to the class to decide.
    // TODO(bob): Figure out better semantics for this.
    Reflect getClass(left) lessThan?(left, right)
end

definfix > 80 (left, right -> Bool)
    (left < right) not and left != right
end

definfix <= 80 (left, right -> Bool)
    (left < right) or left == right
end

definfix >= 80 (left, right -> Bool)
    (left < right) not
end

definfix + 80 (left Int, right Int -> Int)
    Int add(left, right)
end

definfix ~ 80 (left Stringable, right Stringable -> String)
    left string concatenate(right string)
end

// Add an arrow operator to make function types out of other types:
definfix => 80 (left Type, right Type -> Type) FunctionType new(left, right)
