extend class Array
    shared def new(-> Array) Array of()
    
    shared def assignsFrom?(other Type -> Bool)
        if this == other then
            true
        else if other type == type then
            true
        else false
    end
    
    get string String =
        var text = "["
        for i = 0 until(count) do
            text = text ~ this(i) string
            if i < (count - 1) then text = text ~ ", "
        end
        text ~ "]"
    end

    // TODO(bob): Need generics to use for return type.
    get last = this(count - 1)

    get type Type =
        // TODO(bob): Hack!
        var elementType = this(0) type
        List(elementType)
    end

    def iterate(-> ArrayIterator) ArrayIterator new(this)

    def copy(-> Array)
        var result = Array new()
        for item = this do result add(item)
        result
    end

    def sortByString(-> Array)
        var result = copy()
    
        // TODO(bob): Awful bubble sort FTW!
        for i = 0 until(result count) do
            for j = (i + 1) until(result count) do
                if result(i) string > result(j) string then
                    var temp = result(i)
                    result(i) = result(j)
                    result(j) = temp
                end
            end
        end
    
        result
    end

    def unique(-> Array)
        var result = Array new()
        for item = this do
            if result count == 0 then
                result add(item)
            else if result(-1) != item then result add(item)
        end
    
        result
    end

    // TODO(bob): rename contains?
    def contains(item -> Bool)
        for element = this do
            if item == element then return true
        end
        false
    end

    // TODO(bob): Need generics to use for return type.
    def first(predicate -> Dynamic)
        for element = this do
            if predicate(element) then return element
        end
        nothing
    end

    def swap(a Int, b Int ->)
        // TODO(bob): Bounds check
        var temp = this(a)
        this(a) = this(b)
        this(b) = temp
    end
end

class ArrayIterator
    shared def new(array Array -> ArrayIterator)
        construct(array: array)
    end
    
    // TODO(bob): Need generics for return type.
    get current Dynamic = array(index)

    get type Type =
        // TODO(bob): Hack!
        var elementType = array(0) type
        Iterator(elementType)
    end

    def next(-> Bool)
        index = index + 1
        index < array count
    end

    var array Array
    var index = -1
end
