def Tuple iterate(-> TupleIterator) TupleIterator new(this)

// A tuple of Types is itself a Type.
extend class Tuple
    get string String =
        var result = "("
    
        for field = this
        for index = 0 to(count) do
            result = result ~ field ~ if index < (count - 1) then ", " else ")"
        end
        result
    end

    def assignsFrom?(other Type -> Bool)
        for i = 0 until(count) do
            var name = "_" ~ i
            var field = getField(name)
            var otherField = other getMemberType(name)
            if field assignsFrom?(otherField) not then return false
        end
        
        true
    end

    def getMemberType(name String -> Type)
        // An instance of a Tuple used as a type has fields whose values are the
        // types of the fields for the tuple this type describes.
        if hasField?(name) then
            getField(name)
        else
            Tuple getMemberType(name)
        end
    end
    
    shared def equal?(left Tuple, right Tuple -> Bool)
        if left count != right count then return false

        for leftField = left
        for rightField = right do
            if leftField != rightField then return false
        end
        true
    end

    /*
    get type Type =
        // TODO(bob): This is pretty gross right now. :(
        match count
        case  1 then (_0 type)
        case  2 then (_0 type, _1 type)
        case  3 then (_0 type, _1 type, _2 type)
        case  4 then (_0 type, _1 type, _2 type, _3 type)
        case  5 then (_0 type, _1 type, _2 type, _3 type, _4 type)
        case  6 then (_0 type, _1 type, _2 type, _3 type, _4 type, _5 type)
        case  7 then (_0 type, _1 type, _2 type, _3 type, _4 type, _5 type,
                      _6 type)
        case  8 then (_0 type, _1 type, _2 type, _3 type, _4 type, _5 type,
                      _6 type, _7 type)
        case  9 then (_0 type, _1 type, _2 type, _3 type, _4 type, _5 type,
                      _6 type, _7 type, _8 type)
        case 10 then (_0 type, _1 type, _2 type, _3 type, _4 type, _5 type,
                      _6 type, _7 type, _8 type, _9 type)
        else Tuple
        end
    end
    */
end

class TupleIterator
    shared def new(tuple Tuple -> TupleIterator)
        construct(tuple: tuple)
    end

    get current =
        match index
        case 0 then tuple _0
        case 1 then tuple _1
        case 2 then tuple _2
        case 3 then tuple _3
        case 4 then tuple _4
        case 5 then tuple _5
        case 6 then tuple _6
        case 7 then tuple _7
        case 8 then tuple _8
        case 9 then tuple _9
        end
    end

    def next(-> Bool)
        index = index + 1
        index < tuple count
    end
    
    var tuple Tuple
    var index = -1 // the first call to next advances to the first
end
