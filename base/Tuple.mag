def Tuple iterate() TupleIterator new(this)

// A tuple of Types is itself a Type.
extend class Tuple
    get string String =
        var result = "("

        for field = this
        for index = 0 to(count) do
            result = result ~ field ~ if index < (count - 1) then ", " else ")"
        end
        result
    end

    shared def equal?(left Tuple, right Tuple)
        if left count != right count then return false

        for leftField = left
        for rightField = right do
            if leftField != rightField then return false
        end
        true
    end
end

class TupleIterator
    shared def new(tuple Tuple)
        construct(tuple: tuple)
    end

    get current =
        match index
            case 0 then tuple field0
            case 1 then tuple field1
            case 2 then tuple field2
            case 3 then tuple field3
            case 4 then tuple field4
            case 5 then tuple field5
            case 6 then tuple field6
            case 7 then tuple field7
            case 8 then tuple field8
            case 9 then tuple field9
        end
    end

    def next()
        index = index + 1
        index < tuple count
    end

    var tuple Tuple
    var index = -1 // the first call to next advances to the first
end
