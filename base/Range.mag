defclass Range
    var first Int
    var last  Int
end

def (this Int) to(last Int) ->
    Range new(first: this, last: last)
end

def (this Range) iterate() ->
    RangeIterator new(first, last)
end

defclass RangeIterator
    var current Int
    var last    Int
end

def (RangeIterator) new(first Int, last Int) ->
    // Rollback so the first call to next() advances to the first value.
    RangeIterator new(current: first - 1, last: last)
end

def (this RangeIterator) next() ->
    // TODO(bob): Why is "this" required here?
    this current = this current + 1
    this current <= this last
end

/*
// Add iterator methods on Ints.
// TODO(bob): Use real int max.
// TODO(bob): Actual syntax for defining getters.
defineMultimethod("countingUp", fn(this_ Int) Range new(this, 99999999))

def Int times()
    Range new(0, this - 1)
end

def Int to(last Int)
    Range new(this, last)
end

def Int until(last Int)
    Range new(this, last - 1)
end

// Define an int iterator.
class RangeIterator
    var current Int
    var last    Int
end

def shared RangeIterator new(first Int, last Int)
    // rollback so the first call to next advances to the first
    construct(current: first - 1, last: last)
end

def RangeIterator next()
    current = current + 1
    current <= last
end

class Range
    var first Int
    var last  Int
end

def shared Range new(first Int, last Int)
    construct(first: first, last: last)
end

def Range iterate()
    RangeIterator new(first, last)
end
*/