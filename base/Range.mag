def (this Indexable) iterate() -> IndexableIterator new(indexable: this)

def (this Indexable) validateIndex(index Int) ->
    // Negative indexes count from the back.
    if index < 0 then index = this count + index

    // Check the bounds.
    if index < 0 then throw OutOfBoundsError new()
    if index >= this count then throw OutOfBoundsError new()

    // Return the updated index.
    index
end

defclass IndexableIterator
    var indexable
    var index = -1
end

def (this IndexableIterator) next() ->
    this index = this index + 1
    this index < this indexable count
end

def (this IndexableIterator) current ->
    this indexable[this index]
end


defclass Range : Indexable
    var first Int
    var last  Int
end

def (this Range)[index Int] ->
    index = this validateIndex(index)
    this first + index
end

def (this Range) count -> this last - this first + 1

def (this Int) to(last Int) ->
    Range new(first: this, last: last)
end

/*
def (this Range) iterate() ->
    RangeIterator new(first, last)
end

defclass RangeIterator
    var current Int
    var last    Int
end

def (RangeIterator) new(first Int, last Int) ->
    // Rollback so the first call to next() advances to the first value.
    RangeIterator new(current: first - 1, last: last)
end

def (this RangeIterator) next() ->
    // TODO(bob): Why is "this" required here?
    this current = this current + 1
    this current <= this last
end
*/

