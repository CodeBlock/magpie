def (_ Indexable) iterate() -> IndexableIterator new(indexable: this)

def (_ Indexable) validateIndex(index Int) ->
    // Negative indexes count from the back.
    if index < 0 then index = this count + index

    // Check the bounds.
    if index < 0 then throw OutOfBoundsError new()
    if index >= this count then throw OutOfBoundsError new()

    // Return the updated index.
    index
end

defclass IndexableIterator
    var indexable
    var index = -1
end

def (_ IndexableIterator) next() ->
    this index = this index + 1
    this index < this indexable count
end

def (_ IndexableIterator) current ->
    this indexable[this index]
end


defclass Range : Indexable
    var first Int
    var last  Int
end

def (_ Range)[index Int] ->
    index = this validateIndex(index)
    this first + index
end

def (_ Range) count -> this last - this first + 1

def (_ Int) to(last Int) ->
    Range new(first: this, last: last)
end
