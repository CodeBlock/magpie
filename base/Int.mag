// Add iterator methods on Ints.
extend class Int
    def times(-> Range) Range new(0, this - 1)
    def to(last Int -> Range) Range new(this, last)
    def until(last Int -> Range) Range new(this, last - 1)
end

// Define an int iterator.
class RangeIterator
    shared def new(first Int, last Int -> RangeIterator)
        // rollback so the first call to next advances to the first
        signify(current: first - 1 last: last)
    end

    def next(-> Bool)
        current = current + 1
        current <= last
    end

    var current Int
    var last    Int
end

class Range    
    shared def new(start Int, last Int -> Range)
        signify(start: start last: last)
    end
    
    def iterate(-> RangeIterator) RangeIterator new(start, last)

    var start Int
    var last  Int
end
