class OrType
    shared def new(cases List(Type) -> OrType)
        construct(cases: cases)
    end

    shared def combine(left Type, right Type -> Type)
        // combine the cases of both arms
        var cases = Array new()

        match left
            case leftOr OrType then for item = leftOr cases do cases add(item)
            else cases add(left)
        end

        match right
            case rightOr OrType then for item = rightOr cases do cases add(item)
            else cases add(right)
        end

        // Sort and remove the duplicates.
        cases = cases sortByString() unique()

        // If just one case remains, there's no union.
        if cases count == 1 then return cases(0)

        OrType new(cases)
    end

    get string String =
        var result = ""
        for index = 0 until(cases count) do
            result = result ~ cases(index) string
            if index < (cases count - 1) then result = result ~ " | "
        end
        result
    end

    shared def equal?(left OrType, right OrType -> Bool)
        if left cases count != right cases count then return false

        for leftCase = left cases
        for rightCase = right cases do
            if leftCase != rightCase then return false
        end
        true
    end

    def assignsFrom?(other Type -> Bool)
        match other
            case orType OrType then
                // It's also an or, so see if all of its cases are matched by one of
                // the ones here.
                for otherCase = orType cases do
                    if assignsFrom?(otherCase) not then return false
                end
                true
            else
                // It's a regular class, so see if any of the cases match it.
                for type = cases do
                    if type assignsFrom?(other) then return true
                end
                false
            end
        end
    end

    def getMemberType(name String -> Type)
        // Union the member types of all of the cases.
        var memberType = cases(0) getMemberType(name)
        for i = 1 until(cases count) do
            memberType = memberType | cases(i) getMemberType(name)
        end

        memberType
    end

    var cases List(Type)
end

// Define a union operator for types:
definfix | 80 (left Type, right Type -> Type) OrType combine(left, right)

def unsafeRemoveNothing(type Type -> Type)
    match type
        case orType OrType then
            // TODO(bob): Hack. Need generic array ctor.
            var remaining = unsafecast[List(Type)](Array new())

            for caseType = orType cases do
                if caseType != Nothing then remaining add(caseType)
            end

            // If just one case remains, there's no or.
            if remaining count == 1 then return remaining(0)

            // Create a new OrType with what's left.
            OrType new(remaining)
        else
            // Doesn't have Nothing to begin with, so we're good.
            type
            // TODO(bob): What if the type is Nothing?
        end
    end
end
