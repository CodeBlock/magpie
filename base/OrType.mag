class OrType
    this(cases)
        this cases = cases
    end
    
    cases Dynamic[] // TODO(bob): IType[Int]
end

def OrType toString(-> String)
    var result = ""
    for index = 0 until(cases count) do
        result = result + cases[index] toString
        if index < (cases count - 1) then result = result + " | "
    end
    result
end

def OrType |(other -> Object)
    Class orTypes(this, other)
end

def OrType canAssignFrom(other -> Bool)
    if other type == OrType then
        // It's also an or, so see if all of its cases are matched by one of
        // the ones here.
        // TODO(bob): Should use let instead of raw unsafeCast.
        var orType = OrType unsafeCast(other)
        for otherCase = orType cases do
            if canAssignFrom(otherCase) not then return false
        end
        true
    else
        // It's a regular class, so see if any of the cases match it.
        for type = cases do
            if type canAssignFrom(other) then return true
        end
        false
    end
end

def OrType getMethodType(name String, arg)
    var firstType = cases[0] getMethodType(name, arg)
    
    for type = cases do
        var method = type getMethodType(name, arg)
        // The method must be present in all cases
        if method == nothing then return nothing
        
        // And all types must match.
        // TODO(bob): Right now, the arg and return types of all cases must
        // match exactly. We could at some point loosen this to allow subtypes.
        if firstType _0 != method _0 then return nothing
        if firstType _1 != method _1 then return nothing
    end
    
    firstType
end

def OrType unsafeRemoveNothing(-> Dynamic)
    var remaining = []
    for type = cases do
        if type != Nothing then remaining add(type)
    end

    // If just one case remains, there's no or.
    if remaining count == 1 then return remaining[0]
    
    // Create a new OrType with what's left.
    OrType new(remaining)
end
