extend class Function
    // Add a shared to Function so that it's easily visible from the interpreter
    // (which already has a reference to Function) so that it can create
    // FunctionType objects.
    shared def newType(paramType Type, returnType Type -> Type)
        FunctionType new(paramType, returnType)
    end
end

class FunctionType
    shared def new(paramType Type, returnType Type -> FunctionType)
        construct(paramType: paramType, returnType: returnType)
    end

    get string String =
        var result = paramType string ~ " -> " ~ returnType
        result
    end

    def assignsFrom?(other Type -> Bool)
        // Both must be functions.
        match other
            case otherFn FunctionType then
                // Parameter must be contravariant and return must be covariant.
                if otherFn paramType assignsFrom?(paramType) not then
                    print("Cannot assign " ~ other ~ " to " ~ this ~
                        " the parameter type is not assignable.")
                    return false
                end
                if returnType assignsFrom?(otherFn returnType) not then
                    print("Cannot assign " ~ other ~ " to " ~ this ~
                        " the return type is not assignable.")
                    return false
                end

                true
            else
                print("Cannot assign " ~ other ~ " to " ~ this ~
                    " because it is a " ~ Reflect getClass(other) ~
                    ", not a function.")
                if (type == FunctionType) not then
                    print(type ~ " is not equal to " ~ FunctionType)
                end
                if FunctionType assignsFrom?(type) not then
                    print(type ~ " is not assignable to " ~ FunctionType)
                end
                false
            end
        end
    end

    def getMemberType(name String -> Type)
        // Just defer to the base function class.
        Function getMemberType(name)
    end

    shared def equal?(left FunctionType, right FunctionType -> Bool)
        left paramType == right paramType and
        left returnType == right returnType
    end

    var paramType  Type
    var returnType Type
end
