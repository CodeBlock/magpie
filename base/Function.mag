// Defines the base Function type constructor.

// Make "Function" a functor that you can call to instantiate function types.
// Type annotations of function types look like Function(Int, String) 
shared Function call(staticConstraint, paramType, returnType)
    FunctionType new(staticConstraint, paramType, returnType)
end

class FunctionType
    this(staticConstraint, paramType, returnType)
        this staticConstraint = staticConstraint
        this paramType = paramType
        this returnType = returnType
    end
    
    staticConstraint Dynamic
    paramType Dynamic
    returnType Dynamic
end

// TODO(bob): Once interfaces are in, function types can just become sugar for
// creating ICallable(Arg, Return) instances.
def FunctionType canAssignFrom(other -> Bool)
    // Both must be functions.
    if other type != FunctionType then return false

    // TODO(bob): What about static arguments?
    
    // Parameter must be contravariant.
    if other paramType canAssignFrom(paramType) not then return false
    
    // Return must be covariant.
    if returnType canAssignFrom(other returnType) not then return false
    
    true
end

def FunctionType getMethodType(name String, arg)
    // Yield call with the appropriate types.
    if name == "call" then return (paramType, returnType)
    
    // For other methods, just defer to the base function class.
    Function getMethodType(name, arg)
end

def FunctionType toString()
    paramType toString + " -> " + returnType toString
end

class StaticFunctionType
    this(params, body)
        this params = params
        this body = body
    end
end