// This implements a simple Reverse Polish Notation calculator.

// Define a basic tokenizer for splitting a string into chunks -----------------

class Tokenizer
    this(text String)
        this text = text
    end
        
    text String
end

def Tokenizer iterate(-> TokenIterator) TokenIterator new(text)

class TokenIterator
    this(text String)
        this text = text
        this current = ""
        this start = 0
    end
    
    text    String
    current String
    start   Int
end

def TokenIterator next(-> Bool)
    if start >= text count then return false

    // skip over whitespace
    while start < text count and text at(start) == " " do
        start = start + 1
    end

    // if we had whitespace until the very end, just stop
    if start >= text count then return false

    // now walk the stop forward until we hit whitespace or the end
    var stop = start
    while stop < text count and text at(stop) != " " do
        stop = stop + 1
    end
    
    // store the token we got
    current = text substring(start, stop)
    // and move past it
    start = stop
    true
end

// Implement a simple stack using a linked list --------------------------------

class Stack    
    top StackItem
end

def Stack push(item Int ->)
    top = StackItem new(item, top)
end

def Stack pop(-> Int)
    var item = top item
    top = top rest
    item
end

def Stack count(-> Int)
    var count = 0
    var stack = this top
    while stack != nothing do
        stack = stack rest
        count = count + 1
    end
    count
end

class StackItem
    this(item Int, rest StackItem)
        this item = item
        this rest = rest
    end
    
    item Int
    rest StackItem
end

// Define the actual calculation function --------------------------------------

var calculate(text String -> Int)
    var stack = Stack new

    for token = Tokenizer new(text) do
        let i = Int parse(token) then
            stack push(i)
            print("push " + i)
        else if token == "+" then
            var right = stack pop
            var left  = stack pop
            var sum   = left + right
            print("add  " + left + " + " + right + " = " + sum)
            stack push(sum)
        else if token == "*" then
            var right   = stack pop
            var left    = stack pop
            var product = left * right
            print("mult " + left + " * " + right + " = " + product)
            stack push(product)
        else
            print("unknown op " + token)
        end
    end
    
    stack pop
end

// Now let's try it out --------------------------------------------------------

var main(->)
    var result = calculate("3 2 * 4 2 * +")
    print("result: " + result)
end
