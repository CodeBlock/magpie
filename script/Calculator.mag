// This implements a simple Reverse Polish Notation calculator.

// Define a basic tokenizer for splitting a string into chunks -----------------

class Tokenizer
    this(text String) this text = text

    def iterate(-> TokenIterator) TokenIterator new(text)
        
    var text String
end

class TokenIterator
    this(text String)
        this text = text
        this current = ""
        this start = 0
    end
    
    def next(-> Bool)
        if start >= text count then return false

        // skip over whitespace
        while start < text count and text(start) == " " do
            start = start + 1
        end

        // if we had whitespace until the very end, just stop
        if start >= text count then return false

        // now walk the stop forward until we hit whitespace or the end
        var stop = start
        while stop < text count and text(stop) != " " do
            stop = stop + 1
        end
    
        // store the token we got
        current = text substring(start, stop)
        // and move past it
        start = stop
        true
    end

    var text    String
    var current String
    var start   Int
end

// Implement a simple stack using a linked list --------------------------------

class Stack
    this()
        top = nothing
    end
    
    def push(item Int ->)
        top = StackItem new(item, top)
    end

    def pop(-> Int)
        let inner = top then
            var item = inner item
            top = inner rest
            item
        else 0
    end

    def count(-> Int)
        var count = 0
        var stack = this top
        while true do
            let inner = stack then
                stack = inner rest
                count = count + 1
            else break
        end
        count
    end

    var top StackItem | Nothing
end

class StackItem
    this(item Int, rest StackItem)
        this item = item
        this rest = rest
    end
    
    var item Int
    var rest StackItem | Nothing
end

// Define the actual calculation function --------------------------------------

def calculate(text String -> Int)
    var stack = Stack new()

    for token = Tokenizer new(text) do
        let i = Int parse(token) then
            stack push(i)
            print("push " + i)
        else if token == "+" then
            var right = stack pop()
            var left  = stack pop()
            var sum   = left + right
            print("add  " + left + " + " + right + " = " + sum)
            stack push(sum)
        else if token == "*" then
            var right   = stack pop()
            var left    = stack pop()
            var product = left * right
            print("mult " + left + " * " + right + " = " + product)
            stack push(product)
        else
            print("unknown op " + token)
        end
    end
    
    stack pop()
end

// Now let's try it out --------------------------------------------------------

def main(->)
    var result = calculate("3 2 * 4 2 * +")
    print("result: " + result)
end
