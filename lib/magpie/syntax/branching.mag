import magpie.syntax

// "and" Parser
// ----------------------------------------------------------------------------

defineInfix("and", 3, fn(parser is Parser, left is Expression, token is Token)
    // Ignore a newline after "and".
    parser matchToken(TokenType.LINE)
    val right = parser parseExpression(3)
    {
        do
            // TODO(bob): Use generated symbol.
            val temp__ = `left
            match temp__ isTrue
                case true then `right
                else temp__
            end
        end
    }
end)

// "or" Parser
// ----------------------------------------------------------------------------
defineInfix("or", 3, fn(parser is Parser, left is Expression, token is Token)
    // Ignore a newline after "or".
    parser matchToken(TokenType.LINE)
    val right = parser parseExpression(3)
    {
        do
            // TODO(bob): Use generated symbol.
            val temp__ = `left
            match temp__ isTrue
                case true then temp__
                else `right
            end
        end
    }
end)
