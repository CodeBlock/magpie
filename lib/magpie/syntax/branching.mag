import magpie.syntax

// "and" Parser
// ----------------------------------------------------------------------------

defineInfix("and", 3, fn(parser is Parser, left is Expression, token is Token)
    // Ignore a newline after "and".
    parser matchToken(TokenType.LINE)
    val right = parser parseExpression(3)
    {
        do
            // TODO(bob): Use generated symbol.
            val temp__ = `left
            match temp__ isTrue
                case true then `right
                else temp__
            end
        end
    }
end)

// "or" Parser
// ----------------------------------------------------------------------------
defineInfix("or", 3, fn(parser is Parser, left is Expression, token is Token)
    // Ignore a newline after "or".
    parser matchToken(TokenType.LINE)
    val right = parser parseExpression(3)
    {
        do
            // TODO(bob): Use generated symbol.
            val temp__ = `left
            match temp__ isTrue
                case true then temp__
                else `right
            end
        end
    }
end)

// If expression
// ----------------------------------------------------------------------------

definePrefix("if", fn(parser is Parser, token is Token)
    // Parse the condition.
    val condition, _ = parser parseExpressionOrBlock(["then"])

    // Parse the then body.
    parser consume("then")
    val thenExpr, endToken = parser parseExpressionOrBlock(["else", "end"])

    // Don't try to parse "else" if we got an explicit "end" for the "then"
    // block.
    val consumedEnd = match endToken
        case nothing then false
        case token then
            match token type name
                case "NAME" then token value ==("end")
                else false
            end
        end
    end

    // See if we have an "else" keyword.
    val parsedElse = match consumedEnd
        case true then false
        case false then parser matchToken("else")
    end

    // Parse the "else" expression if there otherwise use nothing.
    val elseExpr = match parsedElse
        case true then parser parseExpressionOrBlock()
        else { nothing }
    end

    // Desugar to a match.
    {
        match `condition isTrue
            case true then `thenExpr
            else `elseExpr
        end
    }
end)
