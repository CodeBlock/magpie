import magpie.syntax

// TODO(bob): Move to somewhere more appropriate:

def (this is TokenType) toString
    this name
end

def (this is Position) toString
    "(" + this startCol + ", " + this startLine + " - " +
        this endCol + ", " + this endLine + ")"
end

def (this is Token) toString
    this position + " " + this type name + " \"" + this text + "\""
end

def (haystack is String) contains(needle is String)
    haystack indexOf(needle) != nothing
end

// ---

// TODO(bob): Should inherit and implement Iterable.
defclass Lexer
    // TODO(bob): Support an iterable stream of characters.
    val _text is String
    var _pos is Int
    var _line is Int
    var _col  is Int
    var _startLine is Int
    var _startCol is Int
    var _read is String
end

def (this == Lexer) init(text /* is SourceReader */)
    this init(_text: text, _pos: 0, _line: 1, _col: 1,
        _startLine: 1, _startCol: 1, _read: "")
end

def (this is Lexer) readToken
    match this _advance
        // Whitespace.
        case " " then this _readWhitespace
        case "\t" then this _readWhitespace

        // Line endings.
        case ";" then this _makeToken(TokenType.LINE)
        case "\n" then this _makeToken(TokenType.LINE)
        case "\r" then this _makeToken(TokenType.LINE)

        case "\\" then this _makeToken(TokenType.LINE_CONTINUATION)

        // Strings.
        case "\"" then this _readString

        // Comments.
        case "/" then
            match this _peek
                case "/" then this _readLineComment
                case "*" then this _readBlockComment
                else this _readOperator
            end

        // Punctuators.
        case "(" then this _makeToken(TokenType.LEFT_PAREN)
        case ")" then this _makeToken(TokenType.RIGHT_PAREN)
        case "[" then this _makeToken(TokenType.LEFT_BRACKET)
        case "]" then this _makeToken(TokenType.RIGHT_BRACKET)
        case "{" then this _makeToken(TokenType.LEFT_BRACE)
        case "}" then this _makeToken(TokenType.RIGHT_BRACE)
        case "`" then this _makeToken(TokenType.BACKTICK)
        case "," then this _makeToken(TokenType.COMMA)

        // EOF.
        case "\0" then this _makeToken(TokenType.EOF)

        // TODO(bob): User-defined patterns would be nice here.
        case c then
            if c _isName then
                this _readName
            else if c _isOperator then
                this _readOperator
            else if c _isDigit then
                this _readNumber
            else this _makeToken(TokenType.ERROR)
        end
    end
end

def (this is Lexer) _readWhitespace
    while true do
        match this _peek
            case " " then this _advance
            case "\t" then this _advance
            else return this _makeToken(TokenType.WHITESPACE)
        end
    end
end

def (this is Lexer) _readString
    var escaped = ""

    while true do
        match this _advance
            case "\\" then
                // String escape.
                match this _advance
                    case "b" then escaped = escaped + "\b"
                    case "f" then escaped = escaped + "\f"
                    case "n" then escaped = escaped + "\n"
                    case "r" then escaped = escaped + "\r"
                    case "t" then escaped = escaped + "\t"
                    case "\"" then escaped = escaped + "\""
                    case "\\" then escaped = escaped + "\\"
                    case "0" then escaped = escaped + "\0"

                    // TODO(bob): Handle unicode escapes.

                    else return this _makeToken(TokenType.ERROR)
                end

            case "\"" then
                return this _makeToken(TokenType.STRING, escaped)

            case "\0" then
                // Unterminated string.
                return this _makeToken(TokenType.ERROR)

            case c then escaped = escaped + c
        end
    end
end

def (this is Lexer) _readLineComment
    var numSlashes = 1
    while this _advance == "/" do numSlashes = numSlashes + 1

    // See if it's a "///" doc comment.
    val type = if numSlashes == 3 then
            TokenType.DOC_COMMENT
        else
            TokenType.LINE_COMMENT
        end

    // Consume the rest of the line.
    while true do
        match this _peek
            case "\n" then break
            case "\r" then break
            case "\0" then break
            else this _advance
        end
    end

    val value = this _read substring(from: numSlashes) trim
    this _makeToken(type, value)
end

def (this is Lexer) _readBlockComment
    while true do
        match this _advance
            case "*" then
                match this _advance
                    case "/" then
                        return this _makeToken(TokenType.BLOCK_COMMENT)
                    case "\0" then
                        return this _makeToken(TokenType.ERROR)
                    else nothing // Keep advancing.
                end
            case "\0" then return this _makeToken(TokenType.ERROR)
            else nothing // Keep advancing.
        end
    end
end

def (this is Lexer) _readName
    while true do
        if this _peek _isName or this _peek _isDigit then
            this _advance
        else if this _peek == ":" then
            this _advance

            // Trim of the ":".
            val value = this _read substring(from: 0, to: this _read count - 1)
            return this _makeToken(TokenType.FIELD, value)
        else return this _makeToken(TokenType.NAME)
    end
end

def (this is Lexer) _readOperator
    while true do
        if this _peek _isName or this _peek _isOperator then
            this _advance
        else if this _peek == ":" then
            this _advance

            // Trim of the ":".
            val value = this _read substring(from: 0, to: this _read count - 1)
            return this _makeToken(TokenType.FIELD, value)
        else
            return this _makeToken(TokenType.NAME)
        end
    end
end

def (this is Lexer) _readNumber
    while true do
        if this _peek _isDigit then
            this _advance
        else if this _peek == ":" then
            this _advance

            // Trim off the ":".
            // TODO(bob): substring(to: -1)
            val value = this _read substring(from: 0, to: this _read count - 1)
            return this _makeToken(TokenType.FIELD, value)
        else
            // TODO(bob): Need to parse int.
            return this _makeToken(TokenType.INT, this _read)
        end
    end
end

def (this is Lexer) _peek
    if this _pos >= this _text count then
        "\0"
    else this _text[this _pos]
end

def (this is Lexer) _advance
    val c = this _peek
    this _pos = this _pos + 1
    this _read = this _read + c

    // Update the position.
    match c
        case "\n" then
            this _line = this _line + 1
            this _col = 1
        else this _col = this _col + 1
    end

    c
end

def (this is Lexer) _makeToken(type is TokenType)
    this _makeToken(type, this _read)
end

def (this is Lexer) _makeToken(type is TokenType, value)
    // Handle reserved words.
    // TODO(bob): Consider making argument writable?
    var actualType = type
    var actualValue = value

    if type == TokenType.NAME then
        actualType = match this _read
            case "nothing" then TokenType.NOTHING
            case "false"   then
                actualValue = false
                TokenType.BOOL
            case "true"    then
                actualValue = true
                TokenType.BOOL
            case "="       then TokenType.EQUALS
            case otherwise then TokenType.NAME
        end
    end

    val token = Token new(position: this _currentPosition,
        type: actualType, text: this _read, value: actualValue)

    this _startLine = this _line
    this _startCol  = this _col
    this _read      = ""

    token
end

def (this is Lexer) _currentPosition
    Position new(file: "",
        startLine: this _startLine, startCol: this _startCol,
        endLine: this _line, endCol: this _col)
end

def (c is String) _isDigit
    // TODO(bob): Need a better way of working with characters.
    match c
        case "0" then true
        case "1" then true
        case "2" then true
        case "3" then true
        case "4" then true
        case "5" then true
        case "6" then true
        case "7" then true
        case "8" then true
        case "9" then true
        else false
    end
end

def (c is String) _isName
    // TODO(bob): Need a better way of working with characters.
    match c
        case "a" then true
        case "b" then true
        case "c" then true
        case "d" then true
        case "e" then true
        case "f" then true
        case "g" then true
        case "h" then true
        case "i" then true
        case "j" then true
        case "k" then true
        case "l" then true
        case "m" then true
        case "n" then true
        case "o" then true
        case "p" then true
        case "q" then true
        case "r" then true
        case "s" then true
        case "t" then true
        case "u" then true
        case "v" then true
        case "w" then true
        case "x" then true
        case "y" then true
        case "z" then true
        case "A" then true
        case "B" then true
        case "C" then true
        case "D" then true
        case "E" then true
        case "F" then true
        case "G" then true
        case "H" then true
        case "I" then true
        case "J" then true
        case "K" then true
        case "L" then true
        case "M" then true
        case "N" then true
        case "O" then true
        case "P" then true
        case "Q" then true
        case "R" then true
        case "S" then true
        case "T" then true
        case "U" then true
        case "V" then true
        case "W" then true
        case "X" then true
        case "Y" then true
        case "Z" then true
        case "_" then true
        case "." then true
        else false
    end
end

def (c is String) _isOperator
    // TODO(bob): Need a better way of working with characters.
    match c
        case "~" then true
        case "!" then true
        case "$" then true
        case "%" then true
        case "^" then true
        case "*" then true
        case "-" then true
        case "=" then true
        case "+" then true
        case "|" then true
        case "/" then true
        case "?" then true
        case "<" then true
        case ">" then true
        else false
    end
end
