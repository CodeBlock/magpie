import classfile:com.stuffwithstuff.magpie.interpreter.builtin.ParserBuiltIns

defclass Parser
end

defclass PrefixParser
end

// TODO(bob): Abstract methods.
def (this is PrefixParser) parse(parser is Parser, token is Token)
    throw Error new("Must override.")
end

defclass Position
    val file      String
    val startLine Int
    val startCol  Int
    val endLine   Int
    val endCol    Int
end

defclass TokenType
    val name String
end

defclass Token
    val position Position
    val type     TokenType
    val text     String
    val value
end

// Expressions
// ----------------------------------------------------------------------------

defclass Expression
    val position is Position
end

defclass AssignExpression : Expression
    val name  is String
    val value is Expression
end

defclass BoolExpression : Expression
    val value is Bool
end

defclass BreakExpression : Expression
end

defclass ClassExpression : Expression
    val doc     is String
    val name    is String
    val parents is List // List of String
    val fields  is List // List of (String, Field)
end

defclass Field
    val mutable?    is Bool
    val initializer // Expression | Nothing
    val pattern     // Pattern | Nothing
end

defclass CallExpression : Expression
    val receiver is Expression
    val name     is String
    val argument is Expression
end

defclass FunctionExpression : Expression
    val doc     is String // TODO(bob): Move doc into Expression?
    val pattern is Pattern
    val body    is Expression
end

defclass ImportExpression : Expression
    val scheme is String
    val module is String
    val name   is String
    val rename is String
end

defclass IntExpression : Expression
    val value is Int
end

defclass MatchExpression : Expression
    val value is Expression
    val cases is List // List of MatchCases
end

defclass ListExpression : Expression
    val elements is List // List of Expression
end

defclass LoopExpression : Expression
    val body is Expression
end

defclass MethodExpression : Expression
    val doc     is String
    val name    is String
    val pattern is Pattern
    val body    is Expression
end

defclass NameExpression : Expression
    val name is String
end

defclass NothingExpression : Expression
end

defclass RecordExpression : Expression
    val fields is List // List of (String, Expression)
end

defclass ReturnExpression : Expression
    val value is Expression
end

defclass ScopeExpression : Expression
    val body    is Expression
    val catches is List // List of MatchCases
end

defclass SequenceExpression : Expression
    val expressions is List // List of Expression
end

defclass StringExpression : Expression
    val value is String
end

defclass ThrowExpression : Expression
    val value is Expression
end

defclass VarExpression : Expression
    val pattern is Pattern
    val value   is Expression
end

// MatchCase
// ----------------------------------------------------------------------------

defclass MatchCase
    val pattern is Pattern
    val body    is Expression
end

// Patterns
// ----------------------------------------------------------------------------

defclass Pattern
end

defclass RecordPattern : Pattern
    val fields is List // List of (String, Pattern) pairs.
                    // Ideally, would be String -> Pattern map.
end

defclass TypePattern : Pattern
    val type is Expression
end

defclass ValuePattern : Pattern
    val value is Expression
end

defclass VariablePattern : Pattern
    val name    is String
    val pattern // Pattern | Nothing
end

defclass WildcardPattern : Pattern
end
