// TODO(bob): Need to make sure this cannot be constructed somehow.
defclass Parser
    /// An instance of this class will be passed to a user-defined parse()
    /// method. That can then call methods on this to consume tokens, do
    /// lookahead, etc.
end

def parse
    /// TODO(bob): Document me!
end

defclass Position
    val file      String
    val startLine Int
    val startCol  Int
    val endLine   Int
    val endCol    Int
end

defclass TokenType
    val name String
end

// TODO(bob): A better enum type would be nice.
// punctuation and grouping
val TokenType.LEFT_PAREN = TokenType new(name: "LEFT_PAREN")
val TokenType.RIGHT_PAREN = TokenType new(name: "RIGHT_PAREN")
val TokenType.LEFT_BRACKET = TokenType new(name: "LEFT_BRACKET")
val TokenType.RIGHT_BRACKET = TokenType new(name: "RIGHT_BRACKET")
val TokenType.LEFT_BRACE = TokenType new(name: "LEFT_BRACE")
val TokenType.RIGHT_BRACE = TokenType new(name: "RIGHT_BRACE")
val TokenType.BACKTICK = TokenType new(name: "BACKTICK")
val TokenType.COMMA = TokenType new(name: "COMMA")

val TokenType.ASTERISK = TokenType new(name: "ASTERISK")
val TokenType.SLASH = TokenType new(name: "SLASH")
val TokenType.PERCENT = TokenType new(name: "PERCENT")
val TokenType.PLUS = TokenType new(name: "PLUS")
val TokenType.MINUS = TokenType new(name: "MINUS")
val TokenType.LT = TokenType new(name: "LT")
val TokenType.GT = TokenType new(name: "GT")
val TokenType.LTE = TokenType new(name: "LTE")
val TokenType.GTE = TokenType new(name: "GTE")
val TokenType.EQ = TokenType new(name: "EQ")
val TokenType.EQEQ = TokenType new(name: "EQEQ")
val TokenType.NOTEQ = TokenType new(name: "NOTEQ")

val TokenType.AND        = TokenType new(name: "AND")
val TokenType.AS         = TokenType new(name: "AS")
val TokenType.BREAK      = TokenType new(name: "BREAK")
val TokenType.CASE       = TokenType new(name: "CASE")
val TokenType.CATCH      = TokenType new(name: "CATCH")
val TokenType.DEF        = TokenType new(name: "DEF")
val TokenType.DEFCLASS   = TokenType new(name: "DEFCLASS")
val TokenType.DO         = TokenType new(name: "DO")
val TokenType.ELSE       = TokenType new(name: "ELSE")
val TokenType.END        = TokenType new(name: "END")
val TokenType.EXPORT     = TokenType new(name: "EXPORT")
val TokenType.FN         = TokenType new(name: "FN")
val TokenType.FOR        = TokenType new(name: "FOR")
val TokenType.IMPORT     = TokenType new(name: "IMPORT")
val TokenType.IF         = TokenType new(name: "IF")
val TokenType.IN         = TokenType new(name: "IN")
val TokenType.IS         = TokenType new(name: "IS")
val TokenType.MATCH      = TokenType new(name: "MATCH")
val TokenType.ONLY       = TokenType new(name: "ONLY")
val TokenType.OR         = TokenType new(name: "OR")
val TokenType.RETURN     = TokenType new(name: "RETURN")
val TokenType.THEN       = TokenType new(name: "THEN")
val TokenType.THROW      = TokenType new(name: "THROW")
val TokenType.VAL        = TokenType new(name: "VAL")
val TokenType.VAR        = TokenType new(name: "VAR")
val TokenType.WHILE      = TokenType new(name: "WHILE")
val TokenType.WITH       = TokenType new(name: "WITH")

// identifiers
val TokenType.NAME = TokenType new(name: "NAME")
val TokenType.FIELD = TokenType new(name: "FIELD") // a record field like "x:"

// literals
val TokenType.BOOL = TokenType new(name: "BOOL")
val TokenType.DOUBLE = TokenType new(name: "DOUBLE")
val TokenType.INT = TokenType new(name: "INT")
val TokenType.NOTHING = TokenType new(name: "NOTHING")
val TokenType.STRING = TokenType new(name: "STRING")

// comments
val TokenType.BLOCK_COMMENT = TokenType new(name: "BLOCK_COMMENT")
val TokenType.DOC_COMMENT = TokenType new(name: "DOC_COMMENT")
val TokenType.LINE_COMMENT = TokenType new(name: "LINE_COMMENT")

// spacing
val TokenType.LINE = TokenType new(name: "LINE")
val TokenType.WHITESPACE = TokenType new(name: "WHITESPACE")
val TokenType.LINE_CONTINUATION = TokenType new(name: "LINE_CONTINUATION")

val TokenType.ERROR = TokenType new(name: "ERROR")
val TokenType.EOF = TokenType new(name: "EOF")

defclass Token
    val position Position
    val type     TokenType
    val text     String
    val value
end

// Expressions
// ----------------------------------------------------------------------------

defclass Expression
    val position is Position
end

defclass ArrayExpression is Expression
    val elements is Array // of Expression
end

defclass AssignExpression is Expression
    val name  is String
    val value is Expression
end

defclass BoolExpression is Expression
    val value is Bool
end

defclass BreakExpression is Expression
end

defclass CallExpression is Expression
    val name     is String
    val argument is Expression
end

defclass ClassExpression is Expression
    val doc     is String
    val name    is String
    val parents is Array // of String
    val fields  is Array // of (String, Field)
end

defclass Field
    val isMutable   is Bool
    val initializer // Expression | Nothing
    val pattern     // Pattern | Nothing
end

defclass FunctionExpression is Expression
    val doc     is String // TODO(bob): Move doc into Expression?
    val pattern is Pattern
    val body    is Expression
end

defclass ImportExpression is Expression
    val scheme is String
    val module is String
    val prefix is String
    val isOnly is Bool
    val declarations is Array // of ImportDeclarations
end

defclass ImportDeclaration
    val isExported  is Bool
    val name        is String
    val rename      is String
end

defclass IntExpression is Expression
    val value is Int
end

defclass MatchExpression is Expression
    val value is Expression
    val cases is Array // of MatchCases
end

defclass LoopExpression is Expression
    val body is Expression
end

defclass MethodExpression is Expression
    val doc     is String
    val name    is String
    val pattern is Pattern
    val body    is Expression
end

defclass NameExpression is Expression
    val name is String
end

defclass NothingExpression is Expression
end

defclass QuoteExpression is Expression
    val body is Expression
end

defclass RecordExpression is Expression
    val fields is Array // of (String, Expression)
end

defclass ReturnExpression is Expression
    val value is Expression
end

defclass ScopeExpression is Expression
    val body    is Expression
    val catches is Array // of MatchCases
end

defclass SequenceExpression is Expression
    val expressions is Array // of Expression
end

defclass StringExpression is Expression
    val value is String
end

defclass ThrowExpression is Expression
    val value is Expression
end

defclass UnquoteExpression is Expression
    val value is Expression
end

defclass VarExpression is Expression
    val isMutable is Bool
    val pattern   is Pattern
    val value     is Expression
end

// MatchCase
// ----------------------------------------------------------------------------

defclass MatchCase
    val pattern is Pattern
    val body    is Expression
end

// Patterns
// ----------------------------------------------------------------------------

defclass Pattern
end

defclass RecordPattern is Pattern
    val fields is Array // of (String, Pattern) pairs.
                        // Ideally, would be String -> Pattern map.
end

defclass TypePattern is Pattern
    val type is Expression
end

defclass ValuePattern is Pattern
    val value is Expression
end

defclass VariablePattern is Pattern
    val name    is String
    val pattern // Pattern | Nothing
end

defclass WildcardPattern is Pattern
end

// TODO(bob): Move these into separate file?
def (expr is BoolExpression) toString
    expr value toString
end

def (expr is CallExpression) toString
    expr name + "(" + expr argument + ")"
end

def (expr is RecordExpression) toString
    var result = ""
    for field, value in expr fields do
        if result != "" then result = result + ", "
        result = result + field + ": " + value
    end
    result
end
