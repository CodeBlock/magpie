// magpie.core is automatically loaded and imported into every module before it
// is run.

// Document the multimethods here before we import intrinsic methods for them.

def toString
    /// Returns a string representation of the left argument.
end

import classfile:com.stuffwithstuff.magpie.intrinsic.ArrayMethods
import classfile:com.stuffwithstuff.magpie.intrinsic.IntrinsicMethods
import classfile:com.stuffwithstuff.magpie.intrinsic.IntMethods
import classfile:com.stuffwithstuff.magpie.intrinsic.ListMethods
import classfile:com.stuffwithstuff.magpie.intrinsic.StringMethods

import magpie.core.comparable

// TODO(bob): The methods are commented out below because multimethods are
// globally scoped now. That means they don't need to be exported. I'm leaving
// them here for now because eventually Magpie will have non-global top-level
// multimethods that will need to be exported and I want to think about which
// of these should be in that category.

import magpie.core.indexable with
//    export iterate
//    export validateIndex
    export Iterator
//    export next
//    export current
    export IndexableIterator
end

import magpie.core.range with
    export Range
//    export first
//    export last
//    export count
//    export from
//    export to
//    export until
end

// TODO(bob): Should this be in core?
import magpie.core.usable with
//    export use
//    export close
end

// String conversion for core classes
// ----------------------------------------------------------------------------

def (this is String) toString
    /// Just returns the argument.
    this
end

def (nothing) toString
    /// Returns "nothing".
    "nothing"
end

def (true) toString
    /// Returns "true".
    "true"
end

def (false) toString
    /// Returns "false".
    "false"
end

def (this is Class) toString
    /// Returns the name of the class.
    this name
end

def (this is Array) toString
    "[" + this join(", ") + "]"
end

def (this is List) toString
    "list [" + this join(", ") + "]"
end

// TODO(bob): Implement these using io.write.

def print()
    /// Prints a newline to standard output.
    printString("\n")
end

def print(text is String)
    /// Prints `text` to standard output.
    printString(text + "\n")
end

def print(any)
    /// Converts `any` to a string and prints it to standard output.
    print(any toString)
end

def not(true)
    /// Returns `false`.
    false
end

def not(false)
    /// Returns `true`.
    true
end

def (this) != (that)
    not(this == that)
end

// Truthiness.
def (this) isTrue
    true
end

def (this is Bool) isTrue
    this
end

def (this is Int) isTrue
    this != 0
end

def (this is String) isTrue
    this count > 0
end

def (nothing) isTrue
    false
end

def (this is Iterable) join(separator is String)
    /// Convert the elements of the collection to a string, and concatenate them
    /// using the given separate between pairs of elements.
    var result = ""
    var first = true
    for element in this do
        match first
            case true then first = false
            else result = result + separator
        end
        result = result + element toString
    end
    result
end

// TODO(bob): Probably want to get rid of this since its too open-ended, but
// really need string interpolation first.
def (left) + (right)
    /// Converts the arguments to strings and concatenates them.
    left toString + right toString
end
