// magpie.core is automatically loaded and imported into every module before it
// is run.
import magpie.reflect

import classfile:com.stuffwithstuff.magpie.interpreter.builtin.BuiltInFunctions
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.ClassBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.FunctionBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.IntBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.ListBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.ObjectBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.StringBuiltIns

def (is String) string
    this
end

def (nothing) string
    "nothing"
end

def (true) string
    "true"
end

def (false) string
    "false"
end

def (is Class) string
    this name
end

def print()
    /// Prints a newline to standard output.
    prints("\n")
end

def print(text is String)
    /// Prints *text* to standard output.
    prints(text + "\n")
end

def print(any)
    /// Converts *any* to a string and prints it to standard output.
    print(any string)
end

def not(true)
    /// Returns `false`.
    false
end

def not(false)
    /// Returns `true`.
    true
end

// By default, == just does identity comparison.
def (_) == (other)
    this sameAs?(other)
end

def (_) != (other)
    not(this == other)
end

def (_) + (other)
    this string +(other string)
end

// Truthiness.
def (_) true?
    true
end

def (is Bool) true?
    this
end

def (is Int) true?
    this != 0
end

def (is String) true?
    this count > 0
end

def (nothing) true?
    false
end

// Implement comparison in terms of a master compareTo() method.
def (is Comparable) < (other is Comparable)
    this compareTo(other) == -1
end

def (is Comparable) > (other is Comparable)
    this compareTo(other) == 1
end

def (is Comparable) <= (other is Comparable)
    this compareTo(other) != 1
end

def (is Comparable) >= (other is Comparable)
    this compareTo(other) != -1
end

// Ranges and indexable iteration.
def (is Indexable) iterate()
    IndexableIterator new(indexable: this)
end

def (is Indexable) validateIndex(index is Int)
    // Negative indexes count from the back.
    if index < 0 then index = this count + index

    // Check the bounds.
    if index < 0 then throw OutOfBoundsError new()
    if index >= this count then throw OutOfBoundsError new()

    // Return the updated index.
    index
end

defclass IndexableIterator
    /// An iterator that can iterator over any class that inherits from
    /// Indexable and provides a "count" getter, and a numeric indexer.
    var indexable
    var index = -1
end

def (is IndexableIterator) next()
    this index = this index + 1
    this index < this indexable count
end

def (is IndexableIterator) current
    this indexable[this index]
end


defclass Range : Indexable
    /// An Indexable, iterable range of sequential integers from a given
    /// *first* to *last* (inclusive).
    var first Int
    var last  Int
end

def (is Range)[index is Int]
    index = this validateIndex(index)
    this first + index
end

def (is Range) count
    this last - this first + 1
end

def (is Int) to(last is Int)
    Range new(first: this, last: last)
end
