// magpie.core is automatically loaded and imported into every module before it
// is run.
import magpie.reflect

import classfile:com.stuffwithstuff.magpie.interpreter.builtin.BuiltInFunctions
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.ClassBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.FunctionBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.IntBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.ListBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.ObjectBuiltIns
import classfile:com.stuffwithstuff.magpie.interpreter.builtin.StringBuiltIns

def (_ String) string
    this
end

def (nothing) string
    "nothing"
end

def (true) string
    "true"
end

def (false) string
    "false"
end

def (_ Class) string
    this name
end

def print()
    prints("\n")
end

def print(text String)
    prints(text + "\n")
end

def print(any)
    print(any string)
end

def not(true)
    false
end

def not(false)
    true
end

// By default, == just does identity comparison.
def (_) == (other)
    this sameAs?(other)
end

def (_) != (other)
    not(this == other)
end

def (_) + (other)
    this string +(other string)
end

// Truthiness.
def (_) true?
    true
end

def (_ Bool) true?
    this
end

def (_ Int) true?
    this != 0
end

def (_ String) true?
    this count > 0
end

def (nothing) true?
    false
end

// Implement comparison in terms of a master compareTo() method.
def (_ Comparable) < (other Comparable)
    this compareTo(other) == -1
end

def (_ Comparable) > (other Comparable)
    this compareTo(other) == 1
end

def (_ Comparable) <= (other Comparable)
    this compareTo(other) != 1
end

def (_ Comparable) >= (other Comparable)
    this compareTo(other) != -1
end

// Ranges and indexable iteration.
def (_ Indexable) iterate()
    IndexableIterator new(indexable: this)
end

def (_ Indexable) validateIndex(index Int)
    // Negative indexes count from the back.
    if index < 0 then index = this count + index

    // Check the bounds.
    if index < 0 then throw OutOfBoundsError new()
    if index >= this count then throw OutOfBoundsError new()

    // Return the updated index.
    index
end

defclass IndexableIterator
    var indexable
    var index = -1
end

def (_ IndexableIterator) next()
    this index = this index + 1
    this index < this indexable count
end

def (_ IndexableIterator) current
    this indexable[this index]
end


defclass Range : Indexable
    var first Int
    var last  Int
end

def (_ Range)[index Int]
    index = this validateIndex(index)
    this first + index
end

def (_ Range) count
    this last - this first + 1
end

def (_ Int) to(last Int)
    Range new(first: this, last: last)
end
