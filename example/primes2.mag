// A concurrent prime sieve.
// Ported from the Go one at http://golang.org/doc/play/sieve.go.

// Send the sequence 2, 3, 4, ... to channel 'ch'.
def generate(channel is Channel) async
    var i = 2
    while true do
        channel send(i)
        i = i + 1
    end
end

// Copy the values from channel 'in' to channel 'out',
// removing those divisible by 'prime'.
def filter(input is Channel, output is Channel, prime is Int) async
    input where(fn _ % prime != 0) pipeTo(output)
end

// The prime sieve: Daisy-chain Filter processes.
var channel = Channel new // Create a new channel.
generate(channel) // Spawn generate fiber.

for i in 0..50 do
    val prime = channel receive
    print(prime)
    val sieve = Channel new
    filter(channel, sieve, prime)
    channel = sieve
end
