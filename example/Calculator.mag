// This implements a simple Reverse Polish Notation calculator.

// Define a basic tokenizer for splitting a string into chunks -----------------

defclass Tokenizer
    var text is String
end

def (this is Tokenizer) iterate()
    TokenIterator new(text: this text)
end

defclass TokenIterator
    var text    String
    var current String = ""
    var start   Int    = 0
end

def (this is TokenIterator) next()
    if this start >= this text count then return false

    // skip over whitespace
    while this start < this text count and this text[this start] == " " do
        this start = this start + 1
    end

    // if we had whitespace until the very end, just stop
    if this start >= this text count then return false

    // now walk the stop forward until we hit whitespace or the end
    var stop = this start
    while stop < this text count and this text[stop] != " " do
        stop = stop + 1
    end

    // store the token we got
    this current = this text substring(this start, stop)
    // and move past it
    this start = stop
    true
end

// Implement a simple stack using a linked list --------------------------------

defclass Stack
    var top = nothing
end

def (this is Stack) push(value is Int)
    this top = StackItem new(value: value, rest: this top)
end

def (this is Stack) pop()
    match this top
        case item is StackItem then
            var value = item value
            this top = item rest
            value
        else 0 // Popping an empty stack.
    end
end

def (this is Stack) count
    var count = 0
    var stack = this top
    while true do
        match stack
            case item is StackItem then
                stack = item rest
                count = count + 1
            else break
        end
    end
    count
end

defclass StackItem
    var value is Int
    var rest
end

// Define the actual calculation function --------------------------------------

def literal(stack is Stack, value is Int)
    stack push(value)
    print("push " + value)
end

def calculate(text is String)
    var stack = Stack new()

    for token in Tokenizer new(text: text) do
        match token
            case "0" then literal(stack, 0)
            case "1" then literal(stack, 1)
            case "2" then literal(stack, 2)
            case "3" then literal(stack, 3)
            case "4" then literal(stack, 4)
            case "5" then literal(stack, 5)
            case "+" then
                var right = stack pop()
                var left = stack pop()
                var sum = left + right
                print("add  " + left + " + " + right + " = " + sum)
                stack push(sum)
            case "*" then
                var right = stack pop()
                var left = stack pop()
                var product = left * right
                print("mult " + left + " * " + right + " = " + product)
                stack push(product)
            else print("unknown op " ~ token)
        end
    end

    stack pop()
end

// Now let's try it out --------------------------------------------------------

var result = calculate("3 2 * 4 2 * +")
print("result: " + result)
