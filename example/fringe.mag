// A generic iterator for iterating over a pair of iterables together.
def (zip is ZipIterator) advance
    match zip iterator1 advance, zip iterator2 advance
        case == done, _ then done
        case _, == done then done
        case pair then pair
    end
end

defclass ZipIterable
    val iterable1
    val iterable2
end

def (zip is ZipIterable) iterate
    ZipIterator new(iterator1: zip iterable1 iterate,
                    iterator2: zip iterable2 iterate)
end

defclass ZipIterator
    val iterator1
    val iterator2
end

def zip(a, b)
    ZipIterable new(iterable1: a, iterable2: b)
end

defclass Tree
    /// A basic binary tree class.
    val left
    var right
end

def (tree is Tree) toString
    "(" + tree left toString + " " + tree right toString + ")"
end

def tree(left, right)
    /// Convenience method for creating a Tree.
    Tree new(left: left, right: right)
end

def (tree is Tree) iterate
    /// Iterates over the fringe, the leaves, of the tree.
    var channel = Channel new
    async
        tree walk(channel)
        channel close
    end
    channel
end

def (obj) walk(channel is Channel)
    channel send(obj)
end

def (tree is Tree) walk(channel is Channel)
    tree left walk(channel)
    tree right walk(channel)
end

// Create two tree with different shapes.
var a = tree(tree(1, 2), tree(3, tree(4, 5)))
var b = tree(tree(1, tree(2, 3)), tree(4, 5))
print(a)
print(b)

// Traverse their fringe in parallel.
for i, j in zip(a, b) do print(i + " " + j)
