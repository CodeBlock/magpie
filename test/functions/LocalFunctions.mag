// a function that takes an int and returns nothing
var a = fn (arg Int ->) print(arg toString)
a(123) //: 123

// a function that takes an int, prints, and returns unit
var c = fn (arg Int ->)
        print("c")
        print(arg toString)
    end
c(123) //: c
       //: 123

// a function that returns a string
var d = fn (-> String) "d" + "d"
print(d()) //: dd

// a function that concatenates two strings
var e = fn (arg1 String, arg2 String -> String) arg1 + arg2
print(e("e1", "e2")) //: e1e2

// use in place
// TODO(bob): Get this working with new IO-style syntax
//print(fn (arg1 String, arg2 String -> String) arg1 + arg2) ("f", "g")) // fg

// nested local function
var f = fn (arg Int ->)
        print("outer " + arg toString)
        var g = fn (arg2 String ->) print("inner " + arg2)
        g(arg toString)
    end
f(2) //: outer 2
     //: inner 2
