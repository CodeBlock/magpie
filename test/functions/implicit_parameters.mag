// A function with no () and no _ takes no parameters.
(fn print("no params")) call // expect: no params

// "_" can be used to define implicit parameters, in the order they appear.
(fn print(_)) call("one param") // expect: one param
(fn print(_ + _)) call("two", " params") // expect: two params
(fn print(_ + _ + _)) call("three", " ", "params") // expect: three params

def (a) foo(b, c)
    print(a + " foo(" + b + ", " + c + ")")
end

// Transform and expression.
fn
    print(_ and _)
end call(true, false) // expect: false

// Transform assign expression.
fn
    var a = "before"
    a = _
    print(a)
end call("assign") // expect: assign

// Transform async expression.
fn
    var channel = Channel new
    async
        channel send(_)
        channel send(_)
    end
    print(channel receive) // expect: one
    print(channel receive) // expect: two
end call("one", "two")

// Transform call expression.
fn
    _ foo(_, _)
end call("a", "b", "c") // expect: a foo(b, c)

// Transform do expression.
fn
    do
        print(_)
    end
end call("do") // expect: do

// Handle nested fn expression.
fn
    print(_) // expect: fn
    fn
        print(_) // expect: inner
    end call("inner")
end call("fn")

// Transform for expression.
fn
    for i in 1..1 do print(_)
end call("for") // expect: for

// Transform if expression.
fn
    if 1 < 2 then print(_)
end call("if") // expect: if

// Transform list expression.
fn
    print([_, _, _])
end call(1, 2, 3) // expect: [1, 2, 3]

// Transform match expression.
fn
    match _
        case 0 then print(_)
        case 1 then print("no")
    end
end call(0, "match") // expect: match

// Transform not expression.
fn
    print(not _)
end call(true) // expect: false

// Transform or expression.
fn
    print(_ or _)
end call(true, false) // expect: true

// Transform return expression.
fn
    return print(_)
end call("return") // expect: return

// Transform catch and throw expressions.
fn
    do
        throw _
    catch a then print(a)
end call("throw") // expect: throw

// Transform variable expressions.
fn
    val a = _
    val b = _
    print(a + b)
end call("a", "b") // expect: ab

// Transform while expression.
fn
    while _ do
        print(_)
        break
    end
end call(true, "while") // expect: while
