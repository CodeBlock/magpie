val tuple3 = 3, 4, 5

// Destructure tuples.
do
    val a, b, c = tuple3
    print(a) // expect: 3
    print(b) // expect: 4
    print(c) // expect: 5
end

// Partial destructure.
do
    val a, b = tuple3
    print(a) // expect: 3
    print(b) // expect: 4
end

val record = a: 1, b: 2, c: 3

// Destructure named record.
do
    val a: a, b: b, c: c = record
    print(a) // expect: 1
    print(b) // expect: 2
    print(c) // expect: 3
end

// Partial destructure.
do
    val a: a, c: b = record
    print(a) // expect: 1
    print(b) // expect: 3
end

// Destructure in different order.
do
    val c: k, a: l, b: m = record
    print(l) // expect: 1
    print(m) // expect: 2
    print(k) // expect: 3
end

// Mixed tuple/record.
do
    val mixed = 1, a: 2, 3, b: 4
    val n, a: o, p, b: q = mixed
    print(n) // expect: 1
    print(o) // expect: 2
    print(p) // expect: 3
    print(q) // expect: 4
end

// Nested patterns.
do
    val nested = 1, (a: 2, b: (3, 4), c: 5), 6
    val r, (a: s, b: (t, u), c: v), w = nested
    print(r) // expect: 1
    print(s) // expect: 2
    print(t) // expect: 3
    print(u) // expect: 4
    print(v) // expect: 5
    print(w) // expect: 6
end

// Numeric field names.
do
    val tuple = 0: 5, 1: 6, 2: 7
    var a, b, c = tuple
    print(a) // expect: 5
    print(b) // expect: 6
    print(c) // expect: 7
end

// Not a record value.
do
    val x: a = "not record"
catch err is NoMatchError then
    print("caught") // expect: caught
end

// Missing field.
do
    val x: a, y: b = x: 1
catch err is NoMatchError then
    print("caught") // expect: caught
end

// Field pattern fails.
do
    val x: a is Num = x: true
catch err is NoMatchError then
    print("caught") // expect: caught
end

