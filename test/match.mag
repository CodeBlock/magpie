// Evaluate the value expression once.
match print("a") // expect: a
    case "a" then print("one") // expect: one
    case "b" then print("two")
end

// Return the value of the matched case.
print(match 2
    case 1 then "one"
    case 2 then "two"
    case 3 then "three"
end) // expect: two

// Only evaluate the first matched case.
match true
    case true then print("1") // expect: 1
    case true then print("2")
end

// Throw an error if no case matches.
do
    match "not found"
        case "a" then "bad"
        case "b" then "bad"
    end
catch err then
    print("caught") // expect: caught
end

// Bind pattern variables.
match 1, 2
    case a, b then print(a + b) // expect: 3
end

// Scope a binding to just the matched case.
do
    val a = "outer"
    match "match"
        case a then print(a) // expect: match
    end
    print(a) // expect: outer
end

// Allow a block for a case body.
match "first"
    case "first" then
        print("a") // expect: a
        print("b") // expect: b
    case "second" then
        print("bad")
    end
end

// Record pattern.
match x: 1, y: 2
    case x: 1, y: 3 then print("bad")
    case x: 2, y: 1 then print("bad")
    case x: 1, z: 2 then print("bad")
    case x: 1 then print("x") // expect: x
    case y: 2 then print("bad")
end
