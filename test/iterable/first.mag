// Return the first item.
print(["only"] first) // expect: only
print([1, 2, 3] first) // expect: 1
print("abc" first) // expect: a

// Throw an error if the iterable has no items.
do
    [] first
catch is ArgError then print("caught") // expect: caught

do
    val channel = Channel new
    async
        print("none") // expect: none
        channel close
    end
    channel first
catch is ArgError then print("caught") // expect: caught

// Stop iterating after the first item.
defclass Counter is Iterable
end

def (is Counter) iterate
    CounterIterator new(i: 0)
end

defclass CounterIterator
    var i
end

def (iterator is CounterIterator) advance
    iterator i = iterator i + 1
    print("count " + iterator i)
    iterator i
end

do
    print(Counter new first)
    // expect: count 1
    // expect: 1
end
