def foo(block)
    print("should not get called")
end

// After literals.
true as a do print("bad") // expect error
'c' as a do print("bad") // expect error
1.2 as a do print("bad") // expect error
123 as a do print("bad") // expect error
[] as a do print("bad") // expect error
nothing as a do print("bad") // expect error
"s" as a do print("bad") // expect error

// After and expression.
true and foo as a do "block" // expect error

// After assignment.
var a = 1
a = foo as a do print("block") // expect error

// After async.
async
    nothing
end as a do print("bad") // expect error

// After break.
for i in 1..2 do
    break as a do print("bad") // expect error
end

// After catch.
do
    nothing
catch is String then
    print("caught")
end as a do print("block") // expect error

// After do.
do
    nothing
end as a do print("block") // expect error

// After for.
for i in 1..2 do
    nothing
end as a do print("block") // expect error

// After if.
if true then
    nothing
end as a do print("block") // expect error

if true then
    nothing
else
    nothing
end as a do print("block") // expect error

// After match.
match true
    case true then "true"
end as a do print("block") // expect error

// After or expression.
false or foo as a do print("block") // expect error

// After while.
while false do
    nothing
end as a do print("block") // expect error
