class Foo
end

def Foo bar(a Int -> Int) a
def Foo baz(->) print("baz")

var IFoo = Interface new("IFoo")
IFoo methods add(Method new("bar", (fn() Int), fn() Int))
IFoo methods add(Method new("baz", (fn() Nothing), fn() Nothing))

var ITooMany = Interface new("ITooMany")
ITooMany methods add(Method new("bar", (fn() Int), fn() Int))
ITooMany methods add(Method new("baz", (fn() Nothing), fn() Nothing))
ITooMany methods add(Method new("notThere", (fn() Int), fn() Int))

var ISubset = Interface new("ISubset")
ISubset methods add(Method new("bar", (fn() Int), fn() Int))

var main(->)
    print(IFoo canAssignFrom(Foo))     //: true
    print(ITooMany canAssignFrom(Foo)) //: false
    print(ISubset canAssignFrom(Foo))  //: true
    
    // Interfaces also duck type to each other.
    print(ISubset canAssignFrom(IFoo))     //: true
    print(ISubset canAssignFrom(ITooMany)) //: true
    print(IFoo canAssignFrom(ISubset))     //: false
    print(ITooMany canAssignFrom(ISubset)) //: false
end
