/*
import spec.specify

specify("A 'catch' clause in a block") with

    it should("unwind past uncaught error types") with
        var caught = false
        do
            do
                throw "unwind error"
            catch is Int then
                fail("Should not be caught here.")
            end
        catch is String then
            caught = true
        end
        caught shouldEqual(true)
    end

    it should("allow catch clauses in an if/then block") with
        if true then
            throw "error"
        catch err is String then err shouldEqual("error")
    end

    it should("allow catch clauses in an else block") with
        if false then
            nothing
        else
            throw "error"
        catch err is String then err shouldEqual("error")
    end
end
*/

// Do not execute the catch block if no error thrown.
do
    print("no error") // expect: no error
catch err then
    print("bad")
end
print("after") // expect: after

// Execute a catch block when an error is thrown.
do
    throw "blah"
catch err then
    print("caught") // expect: caught
end

// Evaluate the throw expression.
do
    throw print("err") // expect: err
catch err then
    print("caught") // expect: caught
end

// Catch the thrown object.
do
    throw "err"
catch err then
    print(err) // expect: err
end

// Evaluate to the result of the catch block.
do
    val a = do
        throw "err"
    catch err then
        "caught"
    end
    print(a) // expect: caught
end

// Allow a single line catch expression.
do
    throw "err"
catch err then print("caught") // expect: caught

// Allow catch clauses in an if/then block.
if true then
    throw "err"
catch err then print("ok") // expect: ok

// Allow catch clauses in an else block.
if false then
    nothing
else
    throw "err"
catch err then print("ok") // expect: ok

// Select the first matching catch clause.
do
    throw "err"
catch "wrong" then
    print("bad")
catch "also wrong" then
    print("bad")
catch "err" then
    print("good")   // expect: good
catch "err" then
    print("bad")
end


// TODO(bob):
// - catch patterns, destructuring, value patterns, etc.
// - continue to unwind if no clause matches
// - catches in other block expressions (for, while, etc.)

