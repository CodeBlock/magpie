import spec.specify

specify("A record pattern") with
    it should("match subpatterns against fields") with
        match a: 1, b: 2
            case a: 1, b: 3 then "no"
            case a: 3, b: 2 then "no"
            case a: 1, b: 2 then "yes"
        end shouldEqual("yes")
    end

    it should("bind a variable to a field") with
        match a: "one", b: (c: "two", d: "three")
            case a: a, b: (c: b, d: c) then a + b + c
        end shouldEqual("onetwothree")
    end
end

specify("A tuple pattern") with
    it should("match subpatterns against fields") with
        match 1, 2
            case 1, 3 then "no"
            case 3, 2 then "no"
            case 1, 2 then "yes"
        end shouldEqual("yes")
    end

    it should("bind a variable to a field") with
        match "one", ("two", "three")
            case a, (b, c) then a + b + c
        end shouldEqual("onetwothree")
    end
end

specify("A value pattern") with
    it should("match a literal bool value") with
        match true
            case true then "yes"
            case false then "no"
        end shouldEqual("yes")
    end

    it should("match a literal int value") with
        match 2
            case 1 then "no"
            case 2 then "yes"
        end shouldEqual("yes")
    end

    it should("match a literal string value") with
        match "a"
            case "a" then "yes"
            case "b" then "no"
        end shouldEqual("yes")
    end

    it should("match a class object as a value") with
        match Int
            case Bool then "no"
            case Int then "yes"
        end shouldEqual("yes")
    end
end

specify("A variable pattern") with
    it should("always match if it has no type") with
        match "whatever"
            case a      then "yes"
            case "else" then "no"
        end shouldEqual("yes")
    end

    it should("allow a type after the name") with
        match 123
            case a Bool then "no"
            case a Int then "yes"
        end shouldEqual("yes")
    end

    it should("not bind if the name is a wildcard") with
        fn
            match "whatever"
                case _      then _
                case "else" then "no"
            end
        end shouldThrow(NoVariableError)
    end
end
