import spec.specify

specify("A 'var' expression") with
    it should("bind a value to a name") with
        var i = "value"
        i shouldEqual("value")
    end

    it should("shadow a variable in an outer scope") with
        var i = "outer"
        if true then
            var i = "inner"
            i shouldEqual("inner")
        end
        i shouldEqual("outer")
    end

    it should("not allow redefining in the same scope") with
        fn
            var i = "first"
            var i = "second"
        end shouldThrow(RedefinitionError)
    end

    it should("allow a block initializer") with
        var i =
            var temp = "a"
            temp = temp + "b"
            temp + "c"
        end
        i shouldEqual("abc")
    end

    it should("throw a NoMatchError if the value doesn't match the " +
              " pattern") with
        fn
            var a, b = "not record"
        end shouldThrow(NoMatchError)
    end

    // TODO(bob): Spec pattern destructuring.
end