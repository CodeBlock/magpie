specify("A quotation expression") with
    it should("return a AndExpression when containing an 'and' expression") with
        { 1 and 2 } type shouldBe(AndExpression)
        { 1 and 2 } left string shouldBe("1")
        { 1 and 2 } right string shouldBe("2")
    end

    it should("return a BoolExpression when containing a boolean literal") with
        { true } type shouldBe(BoolExpression)
        { true } value shouldBe(true)
        { false } value shouldBe(false)
    end

    it should("return a IntExpression when containing an int literal") with
        { 1 } type shouldBe(IntExpression)
        { 2 } value shouldBe(2)
        { 3 } value shouldBe(3)
    end

    it should("return a NothingExpression when containing nothing") with
        { nothing } type shouldBe(NothingExpression)
    end

    it should("return a OrExpression when containing an 'or' expression") with
        { 1 or 2 } type shouldBe(OrExpression)
        { 1 or 2 } left string shouldBe("1")
        { 1 or 2 } right string shouldBe("2")
    end

    it should("return a StringExpression when containing a string literal") with
        { "a" } type shouldBe(StringExpression)
        { "b" } value shouldBe("b")
        { "c" } value shouldBe("c")
    end
end

specify("An unquote in a quotation") with
    it should("insert the value of a named identifier into the quotation") with
        var foo = { a(b) }
        { c(`foo) } string shouldBe("c(a(b))")
    end

    it should("allow a parenthesized expression after the backtick") with
        def make(value) IntExpression new(value: value)
        { print(`(make(123))) } string shouldBe("print(123)")
    end

    it should("wrap an unquoted nothing in a NothingExpression") with
        { `(nothing) } type shouldBe(NothingExpression)
    end

    it should("wrap an unquoted bool in a BoolExpression") with
        { `(true) } type shouldBe(BoolExpression)
        { `(true) } value shouldBe(true)
    end

    it should("wrap an unquoted int in an IntExpression") with
        { `(123) } type shouldBe(IntExpression)
        { `(123) } value shouldBe(123)
    end

    it should("wrap an unquoted string in a StringExpression") with
        { `("foo") } type shouldBe(StringExpression)
        { `("foo") } value shouldBe("foo")
    end
end
