specify("A quotation expression") with
    it should("return a BoolExpression when containing a boolean literal") with
        { true } shouldBe(BoolExpression)
        { true } value shouldEqual(true)
        { false } value shouldEqual(false)
    end

    it should("return a IntExpression when containing an int literal") with
        { 1 } shouldBe(IntExpression)
        { 2 } value shouldEqual(2)
        { 3 } value shouldEqual(3)
    end

    it should("return a NothingExpression when containing nothing") with
        { nothing } shouldBe(NothingExpression)
    end

    it should("return a StringExpression when containing a string literal") with
        { "a" } shouldBe(StringExpression)
        { "b" } value shouldEqual("b")
        { "c" } value shouldEqual("c")
    end
end

specify("An unquote in a quotation") with
    it should("insert the value of a named identifier into the quotation") with
        var foo = { a(b) }
        { c(`foo) } string shouldEqual("c(a(b))")
    end

    it should("allow a parenthesized expression after the backtick") with
        def make(value) IntExpression new(value: value)
        { print(`(make(123))) } string shouldEqual("print(123)")
    end

    it should("wrap an unquoted nothing in a NothingExpression") with
        { `(nothing) } shouldBe(NothingExpression)
    end

    it should("wrap an unquoted bool in a BoolExpression") with
        { `(true) } shouldBe(BoolExpression)
        { `(true) } value shouldEqual(true)
    end

    it should("wrap an unquoted int in an IntExpression") with
        { `(123) } shouldBe(IntExpression)
        { `(123) } value shouldEqual(123)
    end

    it should("wrap an unquoted string in a StringExpression") with
        { `("foo") } shouldBe(StringExpression)
        { `("foo") } value shouldEqual("foo")
    end
end
