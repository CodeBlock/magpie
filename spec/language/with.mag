specify("A 'with' block argument") with
    it should("pass the body as a function to the method") with
        def f(block) block()
        var called = false
        f with
            called = true
        end
        called shouldEqual(true)
    end
    
    it should("allow a block body") with
        def f(block) block()
        
        var result = ""
        f with
            result = "a"
            result = result ~ "b"
        end
        result shouldEqual("ab")
    end
    
    it should("allow a single expression body") with
        def f(block) block()
        
        var result = ""
        f with result = "ab"
        result shouldEqual("ab")
    end
    
    it should("concatenate the fn with other arguments") with
        def f(arg1, arg2, block)
            arg1 shouldEqual("arg1")
            arg2 shouldEqual("arg2")
            block()
        end
        
        var called = false
        f("arg1", "arg2") with
            called = true
        end
        called shouldEqual(true)
    end
    
    it should("create an 'it' parameter if not is provided") with
        def f(block) block("it")
        f with it shouldEqual("it")
    end
    
    it should("allow a parameter list") with
        def f(block) block("a", "b")
        f with(a, b)
            a shouldEqual("a")
            b shouldEqual("b")
        end
    end
    
    it should("only do a local return") with
        def f(block) block()
        
        var called = false
        var result = f with
            called = true
            if true then return "returned"
            "no return"
        end
        called shouldEqual(true)
        result shouldEqual("returned")
    end
end
