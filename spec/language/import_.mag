import spec.specify

specify("An 'import' expression") with
    it should("import unqualified names by default") with
        import spec.language.import_test

        a shouldEqual("a")
        b() shouldEqual("b")
    end

    it should("apply a prefix to all names if given") with
        import spec.language.import_test as prefix

        prefix.a shouldEqual("a")
        prefix.b() shouldEqual("b")
    end

    it should("rename a imported name") with
        import spec.language.import_test with
            a as rename.a
            b as rename.b
        end

        rename.a shouldEqual("a")
        rename.b() shouldEqual("b")
    end

    it should("just import the specified names") with
        import spec.language.import_test with only
            a
        end

        a shouldEqual("a")
        fn
            b()
        end shouldThrow(NoMethodError)
    end

    it should("merge multimethds with the same name") with
        import spec.language.import_test_a
        import spec.language.import_test_b

        foo("a") shouldEqual("in a")
        foo("b") shouldEqual("in b")
    end

    it should("export overrides to the imported module") with
        // imports c
        //   c defines foo
        //   c defines bar which calls foo
        // imports d
        //   d imports c
        //   d specializes foo
        // calls bar
        import spec.language.import_test_c
        import spec.language.import_test_d

        callsOverridable("c") shouldEqual("in c")
        callsOverridable("d") shouldEqual("in d")
    end

    // TODO(bob): Relative imports, exports, collisions.
end