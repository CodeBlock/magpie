import spec.specify

specify("An 'import' expression") with
    it should("import unqualified names by default") with
        import spec.language.import_test

        a shouldEqual("a")
        b() shouldEqual("b")
    end

    it should("apply a prefix to all names if given") with
        import spec.language.import_test = prefix

        prefix.a shouldEqual("a")
        prefix.b() shouldEqual("b")
    end

    it should("use the module name as prefix if given \"_\"") with
        import spec.language.import_test = _

        spec.language.import_test.a shouldEqual("a")
        spec.language.import_test.b() shouldEqual("b")
    end

    it should("import a named variable") with
        import spec.language.import_test a

        a shouldEqual("a")
        fn
            b()
        end shouldThrow(NoMethodError)
    end

    it should("import a named method") with
        import spec.language.import_test b

        b() shouldEqual("b")
        fn
            a
        end shouldThrow(NoVariableError)
    end

    it should("rename the imported name") with
        import spec.language.import_test a = rename.a
        import spec.language.import_test b = rename.b

        rename.a shouldEqual("a")
        rename.b() shouldEqual("b")
    end

    // TODO(bob): Relative imports.
end