import spec.specify

specify("A 'with' block argument") with
    it should("pass the body as a function to the method") with
        val f = fn(block) block call()
        var called = false
        f call with
            called = true
        end
        called shouldEqual(true)
    end

    it should("allow a block body") with
        val f = fn(block) block call()
        var result = ""
        f call with
            result = "a"
            result = result + "b"
        end
        result shouldEqual("ab")
    end

    it should("allow a single expression body") with
        val f = fn(block) block call()
        var result = ""
        f call with result = "ab"
        result shouldEqual("ab")
    end

    it should("concatenate the fn with other arguments") with
        val f = fn(arg1, arg2, block)
            arg1 shouldEqual("arg1")
            arg2 shouldEqual("arg2")
            block call()
        end

        var called = false
        f call("arg1", "arg2") with
            called = true
        end
        called shouldEqual(true)
    end

    it should("create an 'it' parameter if not is provided") with
        val f = fn(block) block call("it")
        f call with it shouldEqual("it")
    end

    it should("allow a parameter list") with
        val f = fn(block) block call("a", "b")
        f call with(a, b)
            a shouldEqual("a")
            b shouldEqual("b")
        end
    end

    it should("only do a local return") with
        val f = fn(block) block call()
        var called = false
        val result = f call with
            called = true
            if true then return "returned"
            "no return"
        end
        called shouldEqual(true)
        result shouldEqual("returned")
    end
end
