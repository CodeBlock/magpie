import spec.specify

specify("A class's parent classes") with
    it should("not allow the same class to be inherited more than once") with
        //  A
        // / \
        // \ /
        //  B
        defclass A
        end

        fn
            defclass B is A, A
            end
        end shouldThrow(ParentCollisionError)
    end

    it should("not allow multiple paths to the same class") with
        //   A
        //  / \
        // B   C
        //  \ /
        //   D
        defclass A
        end

        defclass B is A
        end

        defclass C is A
        end

        fn
            defclass D is B, C
            end
        end shouldThrow(ParentCollisionError)
    end
end

specify("A 'var' field in a class") with
    it should("provide a getter for the field") with
        defclass C
            var field
        end

        C new(field: "value") field shouldEqual("value")
    end

    it should("provide a setter for the field") with
        defclass C
            var field
        end

        var c = C new(field: "old")
        c field = "new"
        c field shouldEqual("new")
    end

    it should("specialize the constructor using the type if given") with
        defclass C
            var field is Int
        end

        fn
            C new(field: 123)
        end shouldNotThrow()

        fn
            C new(field: "not int")
        end shouldThrow(NoMethodError)
    end

    it should("specialize the setter using the type if given") with
        defclass C
            var field is Int
        end

        var c = C new(field: 123)

        fn
            c field = 234
        end shouldNotThrow()

        fn
            c field = "not int"
        end shouldThrow(NoMethodError)
    end
end

specify("A 'val' field in a class") with
    it should("provide a getter for the field") with
        defclass C
            val field
        end

        C new(field: "value") field shouldEqual("value")
    end

    it should("not provide a setter for the field") with
        defclass C
            val field
        end

        fn
            C new(field: "value") field = "new"
        end shouldThrow(NoMethodError)
    end

    it should("specialize the constructor using the type if given") with
        defclass C
            val field is Int
        end

        fn
            C new(field: 123)
        end shouldNotThrow()

        fn
            C new(field: "not int")
        end shouldThrow(NoMethodError)
    end
end

specify("A class's default constructor") with
    it should("return an instance of the class") with
        defclass C
        end

        C new() shouldBe(C)
    end

    it should("initialize fields from the given record") with
        defclass C
            var a
            var b
        end

        var c = C new(a: "a", b: "b")
        c a shouldEqual("a")
        c b shouldEqual("b")
    end

    it should("run the initializers provided with fields") with
        defclass C
            var a = "a"
            var b = "b"
        end

        var c = C new()
        c a shouldEqual("a")
        c b shouldEqual("b")
    end

    it should("initialize parent classes with record fields that match the " +
              "parent class name") with
        defclass A
            var aa
        end

        defclass B
            var bb
        end

        defclass C is A, B
            var cc
        end

        var c = C new(A: (aa: "a"), B: (bb: "b"), cc: "c")
        c aa shouldEqual("a")
        c bb shouldEqual("b")
        c cc shouldEqual("c")
    end

    it should("select an appropriate 'init()' method based on the arguments " +
              "provided to 'new()'") with
        defclass C
            var a
            var b
        end

        def (this == C) init(string is String)
            this init(a: string + "a", b: string + "b")
        end

        var c = C new("string ")
        c a shouldEqual("string a")
        c b shouldEqual("string b")
    end

    it should("select an appropriate parent 'init()' method based on the " +
              "arguments provided to the child's 'init()'") with
        defclass A
            var aa
        end

        def (this == A) init(string is String)
            this init(aa: "a " + string)
        end

        defclass B is A
            var bb
        end

        def (this == B) init(string is String)
            this init(A: string, bb: "b " + string)
        end

        var b = B new("string")
        b aa shouldEqual("a string")
        b bb shouldEqual("b string")
    end
end