specify("A 'fn' expression") with
    it should("bind the argument to the parameter") with
        var result = nothing
        var f = fn(a) result = a
        f("one")
        result shouldBe("one")
        
        f("two")
        result shouldBe("two")
    end

    it should("ignore the argument if there is no parameter") with
        var f = fn() "ignore"
        f("one") shouldBe("ignore")
        f("one", "two") shouldBe("ignore")
    end
    
    it should("bind a tuple argument to the parameter") with
        var f = fn(a) a _0 + a _1
        f("one", "two") shouldBe("onetwo")
    end
    
    it should("allow omitting the parameter declaration") with
        (fn "return")() shouldBe("return")
    end
end

specify("A static 'fn' expression") with
    it should("bind the argument to the parameter at runtime") with
        var result = nothing
        var f = fn[A] result = A
        f[Int]
        result shouldBe(Int)
        
        f[Bool]
        result shouldBe(Bool)
    end

    it should("ignore the argument if there is no parameter") with
        var f = fn[] "ignore"
        f["one"] shouldBe("ignore")
        f["one", "two"] shouldBe("ignore")
    end

    it should("bind a tuple argument to the parameter at runtime") with
        var f = fn[A] A _0 + A _1
        f["one", "two"] shouldBe("onetwo")
    end
end
