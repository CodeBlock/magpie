specify("A 'fn' expression") with
    it should("bind the argument to the parameter") with
        var result = nothing
        var f = fn(a) result = a
        f("one")
        result shouldEqual("one")

        f("two")
        result shouldEqual("two")
    end

    it should("ignore the argument if there is no parameter") with
        var f = fn() "ignore"
        f("one") shouldEqual("ignore")
        f("one", "two") shouldEqual("ignore")
    end

    it should("bind a tuple argument to the parameter") with
        var f = fn(a) a field0 ~ a field1
        f("one", "two") shouldEqual("onetwo")
    end

    it should("allow omitting the parameter declaration") with
        (fn "return")() shouldEqual("return")
    end

    it should("close over surrounding variables") with
        var outer = "outer"
        var assigned = ""
        (fn assigned = outer)()
        assigned shouldEqual("outer")
    end
end
