specify("A 'catch' clause in a block") with
    it should("execute a catch block when an error is thrown") with
        var caught = false
        do
            Runtime throw("error")
        catch err String then
            caught = true
        end
        caught shouldBe(true)
    end
       
    it should("evaluate to the caught expression") with
        do
            Runtime throw("error")
        catch err String then "caught"
        end shouldBe("caught")
    end
     
    it should("receive the error thrown by the block") with
        Runtime throw("error")
    catch err String then
        err shouldBe("error")
    end
        
    it should("unwind past uncaught error types") with
        var caught = false
        do
            do
                Runtime throw("error")
            catch err Int then fail("Should not be caught here.")
            end
        catch err String then
            caught = true
        end
        caught shouldBe(true)
    end
    
    it should("allow a single line catch expression") with
        Runtime throw("error")
    catch err String then err shouldBe("error")
    end
    
    it should("allow catch clauses in an if/then block") with
        if true then
            Runtime throw("error")
        catch err String then err shouldBe("error")
        end
    end
    
    it should("allow catch clauses in an else block") with
        if false then
            nothing
        else
            Runtime throw("error")
        catch err String then err shouldBe("error")
        end
    end
end