import spec.specify

specify("A 'def' expression") with
    it should("select a method that matches the argument type") with
        def multi(a is Int)
            "int"
        end

        def multi(a is String)
            "str"
        end

        multi(123) shouldEqual("int")
        multi("s") shouldEqual("str")
    end

    it should("select a method based on record field types") with
        def multi(a is Int, b is Int)
            "int int"
        end

        def multi(a is Int, b is String)
            "int str"
        end

        def multi(a is String, b is Int)
            "str int"
        end

        def multi(a is String, b is String)
            "str str"
        end

        multi(123, 123) shouldEqual("int int")
        multi(123, "s") shouldEqual("int str")
        multi("s", 123) shouldEqual("str int")
        multi("s", "s") shouldEqual("str str")
    end

    it should("throw an error if no method matches") with
        def multi(a is Int)
            "int"
        end

        fn
            multi("not int")
        end shouldThrow(NoMethodError)
    end
end

specify("The linearization of a multimethod") with

    //  A1 A2
    //  | \ |
    //  B1 B2
    //  |
    //  C1

    defclass A1
    end

    defclass A2
    end

    defclass B1 : A1
    end

    defclass B2 : A1, A2
    end

    defclass C1 : B1
    end

    defclass Foo
    end

    it should("prefer the most-derived class") with
        def multi(a is B1)
            "b1"
        end

        def multi(a is A1)
            "a1"
        end

        def multi(a is C1)
            "c1"
        end

        multi(A1 new()) shouldEqual("a1")
        multi(B1 new()) shouldEqual("b1")
        multi(B2 new()) shouldEqual("a1")
        multi(C1 new()) shouldEqual("c1")
    end

    it should("prefer a value over a class") with
        def multi(a is String)
            "class"
        end

        def multi("string")
            "value"
        end

        def multi(123)
            "value"
        end

        def multi(a is Int)
            "class"
        end

        multi("string") shouldEqual("value")
        multi(123) shouldEqual("value")
    end

    it should("prefer a class over an untyped variable") with
        def multi(a is String)
            "class"
        end

        def multi(anything)
            "any"
        end

        def multi(a is Int)
            "class"
        end

        multi("string") shouldEqual("class")
        multi(123) shouldEqual("class")
    end

    it should("prefer a value over an untyped variable") with
        def multi("string")
            "value"
        end

        def multi(anything)
            "any"
        end

        def multi(123)
            "value"
        end

        multi("string") shouldEqual("value")
        multi(123) shouldEqual("value")
    end

    it should("order record by their fields") with
        def multi(a is A1, b is A1)
            "a1 a1"
        end

        def multi(a is B1, b is A1)
            "b1 a1"
        end

        def multi(a is B1, b is B1)
            "b1 b1"
        end

        multi(A1 new(), A1 new()) shouldEqual("a1 a1")
        multi(C1 new(), A1 new()) shouldEqual("b1 a1")
        multi(A1 new(), C1 new()) shouldEqual("a1 a1")
        multi(C1 new(), C1 new()) shouldEqual("b1 b1")
    end

    it should("ignore field order when comparing records") with
        def multi(x: x is A1, y: y is A1)
            "aa"
        end

        def multi(y: y is B1, x: x is B1)
            "bb"
        end

        multi(x: B1 new(), y: B1 new()) shouldEqual("bb")
    end

    it should("be ambiguous if record fields don't agree") with
        def multi(a is B1, b is A1)
            "b1 a1"
        end

        def multi(a is A1, b is B1)
            "a1 b1"
        end

        fn
            multi(B1 new(), B1 new())
        end shouldThrow(AmbiguousMethodError)
    end
end