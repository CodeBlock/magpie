import spec.specify

specify("A 'catch' clause in a block") with
    it should("execute a catch block when an error is thrown") with
        var caught = false
        do
            throw "error"
        catch is String then
            caught = true
        end
        caught shouldEqual(true)
    end

    it should("evaluate to the caught expression") with
        do
            throw "error"
        catch is String then
            "caught"
        end shouldEqual("caught")
    end

    it should("receive the error thrown by the block") with
        throw "error"
    catch err is String then
        err shouldEqual("error")
    end

    it should("unwind past uncaught error types") with
        var caught = false
        do
            do
                throw "unwind error"
            catch is Int then
                fail("Should not be caught here.")
            end
        catch is String then
            caught = true
        end
        caught shouldEqual(true)
    end

    it should("allow a single line catch expression") with
        throw "error"
    catch err is String then err shouldEqual("error")

    it should("allow catch clauses in an if/then block") with
        if true then
            throw "error"
        catch err is String then err shouldEqual("error")
    end

    it should("allow catch clauses in an else block") with
        if false then
            nothing
        else
            throw "error"
        catch err is String then err shouldEqual("error")
    end
end