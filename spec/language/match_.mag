import spec.specify

specify("A 'match' expression") with
    it should("evaluate the value expression once") with
        var called = 0
        var eval = fn
            called = called + 1
            "value"
        end

        match eval call()
            case "a" then "one"
            case "b" then "two"
            else "three"
        end

        called shouldEqual(1)
    end

    it should("return the value of the matched case") with
        match 2
            case 1 then "one"
            case 2 then "two"
            case 3 then "three"
        end shouldEqual("two")
    end

    it should("only evaluate the first matched case") with
        var called = ""
        match true
            case true then called = called + "1"
            case true then called = called + "2"
        end
        called shouldEqual("1")
    end

    it should("throw an error if no case matches") with
        fn
            match "not found"
                case "a" then "bad"
                case "b" then "bad"
            end
        end shouldThrow(NoMatchError)
    end

    it should("match an else case if nothing else matches") with
        match "not found"
            case "a" then "bad"
            case "b" then "bad"
            else "good"
        end shouldEqual("good")
    end

    it should("bind pattern variables") with
        match "1", "2"
            case a, b then a + b
        end shouldEqual("12")
    end

    it should("scope a binding to just the matched case") with
        var a = "outer"
        match "match"
            case a then a = "inner"
        end
        a shouldEqual("outer")
    end
end

specify("The grammar for a 'match' expression") with
    it should("allow a block for a case body") with
        var result = ""
        match "first"
            case "first" then
                result = "a"
                result = result + "b"
            case "second" then
                result = "bad"
                result = result + "d"
            end
        end
        result shouldEqual("ab")
    end

    it should("allow a block for the else body") with
        var result = ""
        match "second"
            case "first" then
            else
                result = "a"
                result = result + "b"
            end
        end
        result shouldEqual("ab")
    end
end