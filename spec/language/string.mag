import spec.specify

specify("A string literal") with
    it should("be delimited by double quotes") with
        "some string" shouldEqual("some string")
    end

    it should("allow backslash-prefixed escape sequences") with
        "(\")"[1] shouldEqual("\"")
        "(\\)"[1] shouldEqual("\\")
        "(\n)"[1] shouldEqual("\n")
    end
end

specify("The indexOf() method on strings") with
    it should("return the index of the string") with
        "hayneedlestack" indexOf("needle") shouldEqual(3)
        "needlehaystack" indexOf("needle") shouldEqual(0)
        "haystackneedle" indexOf("needle") shouldEqual(8)
        "needle" indexOf("needle") shouldEqual(0)
    end

    it should("return the index of the first occurrence") with
        "0123needle456needle789" indexOf("needle") shouldEqual(4)
    end

    it should("return nothing if not found") with
        "just haystack" indexOf("needle") shouldEqual(nothing)
    end
end

specify("The lastIndexOf() method on strings") with
    it should("return the index of the string") with
        "hayneedlestack" lastIndexOf("needle") shouldEqual(3)
        "needlehaystack" lastIndexOf("needle") shouldEqual(0)
        "haystackneedle" lastIndexOf("needle") shouldEqual(8)
        "needle" lastIndexOf("needle") shouldEqual(0)
    end

    it should("return the index of the last occurrence") with
        "0123needle456needle789" lastIndexOf("needle") shouldEqual(13)
    end

    it should("return nothing if not found") with
        "just haystack" lastIndexOf("needle") shouldEqual(nothing)
    end
end

specify("The substring(from:, to:) method on strings") with
    it should("return the substring between the given indices (inclusive)") with
        "012345678" substring(from: 2, to: 5) shouldEqual("2345")
        "012345678" substring(from: 3, to: 3) shouldEqual("3")
        "012345678" substring(from: 0, to: 3) shouldEqual("0123")
        "012345678" substring(from: 2, to: 8) shouldEqual("2345678")
    end
end

specify("The substring(from:, to:) method on strings") with
    it should("return the substring between the given indices (inclusive)") with
        "012345678" substring(from: 2, to: 5) shouldEqual("2345")
        "012345678" substring(from: 3, to: 3) shouldEqual("3")
        "012345678" substring(from: 0, to: 3) shouldEqual("0123")
        "012345678" substring(from: 2, to: 8) shouldEqual("2345678")
    end
end
