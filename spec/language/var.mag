specify("A 'var' expression") with
    it should("bind a value to a name") with
        var i = "value"
        i shouldBe("value")
    end

    it should("shadow a variable in an outer scope") with
        var i = "outer"
        if true then
            var i = "inner"
            i shouldBe("inner")
        end
        i shouldBe("outer")
    end

    it should("not allow redefining in the same scope") with
        fn
            var i = "first"
            var i = "second"
        end shouldThrow(RedefinitionError)
    end

    it should("allow a block initializer") with
        var i =
            var temp = "a"
            temp = temp ~ "b"
            temp ~ "c"
        end
        i shouldBe("abc")
    end

    it should("allow a fully-qualified name") with
        var a.b.i = "abi"
        var a.c.i = "aci"
        var b.c.i = "bci"
        a.b.i shouldBe("abi")
        a.c.i shouldBe("aci")
        b.c.i shouldBe("bci")
    end

    // TODO(bob): Spec pattern destructuring.
end