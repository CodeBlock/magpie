import spec.specify

specify("The Array class") with
    it should("inherit Indexable") with
        [1] shouldBe(Indexable)
    end
end

specifyMethod("(this == Array) new()") with
    it should("create a new empty array") with
        val array = Array new()
        array shouldBe(Array)
        array count shouldEqual(0)
    end
end

specifyMethod("(this == Array) new(fill: value, size: size is Int)") with
    it should("create an array filled with the given value") with
        val array = Array new(fill: "f", size: 5)
        array shouldBe(Array)
        array count shouldEqual(5)
        for element in array do element shouldEqual("f")
    end
end

specifyMethod("(this is Array)[index is Int]") with
    it should("return the element at the zero-based index") with
        val array = [1, "two", true]
        array[0] shouldEqual(1)
        array[1] shouldEqual("two")
        array[2] shouldEqual(true)
    end

    it should("count from the back if the index is negative") with
        val array = [1, "two", true]
        array[-1] shouldEqual(true)
        array[-2] shouldEqual("two")
        array[-3] shouldEqual(1)
    end

    it should("throw an OutOfBoundsError on a bad index") with
        val array = [1, 2, 3]
        fn
            array[3]
        end shouldThrow(OutOfBoundsError)

        fn
            array[-4]
        end shouldThrow(OutOfBoundsError)
    end
end

specifyMethod("(this is Array) count") with
    it should("return the number of elements in the list") with
        [] count shouldEqual(0)
        ["a"] count shouldEqual(1)
        ["a", "b"] count shouldEqual(2)
    end
end
