import spec.specify

specify("The Range class") with
    it should("inherit Indexable") with
        Range new(first: 2, last: 5) shouldBe(Indexable)
    end
end

specifyMethod("(this is Range)[index is Int]") with
    it should("return the value at the zero-based index in the range") with
        val range = Range new(first: 2, last: 5)
        range[0] shouldEqual(2)
        range[1] shouldEqual(3)
        range[2] shouldEqual(4)
        range[3] shouldEqual(5)
    end

    it should("count from the back if the index is negative") with
        val range = Range new(first: 2, last: 5)
        range[-1] shouldEqual(5)
        range[-2] shouldEqual(4)
        range[-3] shouldEqual(3)
        range[-4] shouldEqual(2)
    end

    it should("throw an OutOfBoundsError on a bad index") with
        val range = Range new(first: 2, last: 5)
        fn
            range[4]
        end shouldThrow(OutOfBoundsError)

        fn
            range[-5]
        end shouldThrow(OutOfBoundsError)
    end
end

specifyMethod("(this is Range) count") with
    it should("return the number of values in the range") with
        Range new(first: 2, last: 2) count shouldEqual(1)
        Range new(first: 2, last: 3) count shouldEqual(2)
        Range new(first: 2, last: 4) count shouldEqual(3)
    end
end
