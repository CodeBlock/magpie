import spec.specify

specify("The List class") with
    it should("inherit Indexable") with
        [1] toList shouldBe(Indexable)
    end
end

specifyMethod("(this == List) new()") with
    it should("create a new empty list") with
        val list = List new()
        list shouldBe(List)
        list count shouldEqual(0)
    end
end

specifyMethod("(this == List) new(fill: value, size: size is Int)") with
    it should("create a list filled with the given value") with
        val list = List new(fill: "f", size: 5)
        list shouldBe(List)
        list count shouldEqual(5)
        for element in list do element shouldEqual("f")
    end
end

specifyMethod("(this is List)[index is Int]") with
    it should("return the element at the zero-based index") with
        val list = [1, "two", true] toList
        list[0] shouldEqual(1)
        list[1] shouldEqual("two")
        list[2] shouldEqual(true)
    end

    it should("count from the back if the index is negative") with
        val list = [1, "two", true] toList
        list[-1] shouldEqual(true)
        list[-2] shouldEqual("two")
        list[-3] shouldEqual(1)
    end

    it should("throw an OutOfBoundsError on a bad index") with
        val list = [1, 2, 3] toList
        fn
            list[3]
        end shouldThrow(OutOfBoundsError)

        fn
            list[-4]
        end shouldThrow(OutOfBoundsError)
    end
end

specifyMethod("(this is List)[index is Int] = (value)") with
    it should("replace the item at the given index in the list") with
        val list = [2, 3, 4] toList
        list[0] = 5
        list[2] = 6
        list[0] shouldEqual(5)
        list[1] shouldEqual(3)
        list[2] shouldEqual(6)
    end

    it should("count from the back if the index is negative") with
        val list = [2, 3, 4] toList
        list[-1] = 5
        list[-2] = 6
        list[0] shouldEqual(2)
        list[1] shouldEqual(6)
        list[2] shouldEqual(5)
    end

    it should("throw an OutOfBoundsError on a bad index") with
        val list = [1, 2, 3] toList
        fn
            list[3] = "dummy"
        end shouldThrow(OutOfBoundsError)

        fn
            list[-4] = "dummy"
        end shouldThrow(OutOfBoundsError)
    end

    it should("return the assigned value") with
        ([1] toList[0] = 3) shouldEqual(3)
    end
end

specifyMethod("(this is List) add(item)") with
    it should("add an element to the end of the list") with
        val list = ["a"] toList
        list add("b")
        list add("c")

        list[0] shouldEqual("a")
        list[1] shouldEqual("b")
        list[2] shouldEqual("c")
    end

    it should("return the added item") with
        [1, 2] toList add(3) shouldEqual(3)
    end
end

specifyMethod("(this is List) clear()") with
    it should("remove all elements from the list") with
        val list = ["a", "b"] toList
        list clear()
        list count shouldEqual(0)
    end

    it should("return nothing") with
        [1, 2] toList clear() shouldEqual(nothing)
    end
end

specifyMethod("(this is List) count") with
    it should("return the number of elements in the list") with
        [] toList count shouldEqual(0)
        ["a"] toList count shouldEqual(1)
        ["a", "b"] toList count shouldEqual(2)
    end
end

specifyMethod("(this is List) insert(item, at: index is Int)") with
    it should("insert an item at the given index") with
        val list = ["a", "b", "c"] toList
        list insert("d", at: 0)
        list insert("e", at: 2)
        list insert("f", at: 5)

        list[0] shouldEqual("d")
        list[1] shouldEqual("a")
        list[2] shouldEqual("e")
        list[3] shouldEqual("b")
        list[4] shouldEqual("c")
        list[5] shouldEqual("f")
    end

    it should("count from the back (+1) if the index is negative") with
        val list = ["a", "b", "c"] toList
        list insert("d", at: -1)
        list insert("e", at: -2)

        list[0] shouldEqual("a")
        list[1] shouldEqual("b")
        list[2] shouldEqual("c")
        list[3] shouldEqual("e")
        list[4] shouldEqual("d")
    end

    it should("return the inserted item") with
        ["a"] toList insert("b", at: 0) shouldEqual("b")
    end

    it should("throw an OutOfBoundsError on a bad index") with
        val list = [1, 2, 3] toList
        fn
            list insert("dummy", at: 4)
        end shouldThrow(OutOfBoundsError)

        fn
            list insert("dummy", at: -5)
        end shouldThrow(OutOfBoundsError)
    end
end

specifyMethod("(this is List) toArray") with
    it should("create an array with the same elements as the list") with
        val list = [1, 2, 3] toList
        val array = list toArray
        array shouldBe(Array)
        array[0] shouldEqual(1)
        array[1] shouldEqual(2)
        array[2] shouldEqual(3)
    end

    it should("make sure the array doesn't reference the mutable list") with
        val list = ["ok"] toList
        val array = list toArray
        list[0] = "bad"
        array[0] shouldEqual("ok")
    end
end
