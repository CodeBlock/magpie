import spec.specify

specify("The String class") with
    it should("inherit Indexable") with
        "s" shouldBe(Indexable)
    end

    it should("inherit Comparable") with
        "s" shouldBe(Comparable)
    end
end

specifyMethod("(this is String)[index is Int]") with
    it should("return the character at the zero-based index") with
        val string = "abc"
        string[0] shouldEqual("a")
        string[1] shouldEqual("b")
        string[2] shouldEqual("c")
    end

    it should("count from the back if the index is negative") with
        val string = "abc"
        string[-1] shouldEqual("c")
        string[-2] shouldEqual("b")
        string[-3] shouldEqual("a")
    end

    it should("throw an OutOfBoundsError on a bad index") with
        val string = "abc"
        fn
            string[3]
        end shouldThrow(OutOfBoundsError)

        fn
            string[-4]
        end shouldThrow(OutOfBoundsError)
    end
end

specifyMethod("(this is String) count") with
    it should("return the number of characters in the string") with
        "" count shouldEqual(0)
        "a" count shouldEqual(1)
        "ab" count shouldEqual(2)
    end
end

specifyMethod("(haystack is String) indexOf(needle is String)") with
    it should("return the index of the string") with
        "hayneedlestack" indexOf("needle") shouldEqual(3)
        "needlehaystack" indexOf("needle") shouldEqual(0)
        "haystackneedle" indexOf("needle") shouldEqual(8)
        "needle" indexOf("needle") shouldEqual(0)
    end

    it should("return the index of the first occurrence") with
        "0123needle456needle789" indexOf("needle") shouldEqual(4)
    end

    it should("return nothing if not found") with
        "just haystack" indexOf("needle") shouldEqual(nothing)
    end
end

specifyMethod("(haystack is String) lastIndexOf(needle is String)") with
    it should("return the index of the string") with
        "hayneedlestack" lastIndexOf("needle") shouldEqual(3)
        "needlehaystack" lastIndexOf("needle") shouldEqual(0)
        "haystackneedle" lastIndexOf("needle") shouldEqual(8)
        "needle" lastIndexOf("needle") shouldEqual(0)
    end

    it should("return the index of the last occurrence") with
        "0123needle456needle789" lastIndexOf("needle") shouldEqual(13)
    end

    it should("return nothing if not found") with
        "just haystack" lastIndexOf("needle") shouldEqual(nothing)
    end
end

specifyMethod(
        "(this is String) substring(from: from is Int, to: to is Int)") with
    it should("return the substring between the given indices (inclusive)") with
        "012345678" substring(from: 2, to: 5) shouldEqual("2345")
        "012345678" substring(from: 3, to: 3) shouldEqual("3")
        "012345678" substring(from: 0, to: 3) shouldEqual("0123")
        "012345678" substring(from: 2, to: 8) shouldEqual("2345678")
    end
end

specifyMethod(
        "(this is String) substring(from: from is Int)") with
    it should("return the substring from from to the end") with
        "012345" substring(from: 0) shouldEqual("012345")
        "012345" substring(from: 1) shouldEqual("12345")
        "012345" substring(from: 2) shouldEqual("2345")
    end

    // TODO(bob): Test out of bounds. Test negative indices.
end

specifyMethod(
        "(this is String) substring(from: from is Int, count: count is Int)") with
    it should("return the substring starting at the given index and with the " +
              "given length") with
        "012345678" substring(from: 2, count: 1) shouldEqual("2")
        "012345678" substring(from: 3, count: 3) shouldEqual("345")
    end

    it should("return an empty string if count is zero") with
        "012345678" substring(from: 2, count: 0) shouldEqual("")
    end

    it should("throw an OutOfBoundsError if from is too high") with
        fn
            "0123" substring(from: 4, count: 1)
        end shouldThrow(OutOfBoundsError)
    end

    it should("throw an OutOfBoundsError if from is too low") with
        fn
            "0123" substring(from: -5, count: 1)
        end shouldThrow(OutOfBoundsError)
    end

    it should("throw an OutOfBoundsError if count is too high") with
        fn
            "0123" substring(from: 0, count: 5)
        end shouldThrow(OutOfBoundsError)

        fn
            "0123" substring(from: 2, count: 3)
        end shouldThrow(OutOfBoundsError)
    end

    // TODO(bob): Test negative from.
end