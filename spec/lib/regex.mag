import spec.specify
import regex

// TODO(bob): Specify regex().

specifyMethod("(this is String) findAll(regex is Regex)") with
    it should("return all occurrences of the regular expression in the " +
              "String.") with
        val matches = "ab abb" findAll(regex("a(b+)"))
        matches shouldBe(Array)

        matches[0] start shouldEqual(0)
        matches[0] finish shouldEqual(2)
        matches[0] groups[0] shouldEqual("ab")
        matches[0] groups[1] shouldEqual("b")

        matches[1] start shouldEqual(3)
        matches[1] finish shouldEqual(6)
        matches[1] groups[0] shouldEqual("abb")
        matches[1] groups[1] shouldEqual("bb")
    end

    it should("return an empty Array when the regular expression is not in " +
              "the String.") with
        "ab abb" findAll(regex("bc")) count shouldEqual(0)
    end

end

specifyMethod("(this is String) find(regex is Regex)") with
    it should("return a MatchResult when the entire input matches.") with
        val matchResult = "ababab" find(regex("^(ab)+$"))
        matchResult shouldBe(MatchResult)

        matchResult start shouldEqual(0)
        matchResult finish shouldEqual("ababab" count)
        matchResult groups[0] shouldEqual("ababab")
        matchResult groups[1] shouldEqual("ab")
    end

    it should("return nothing when the string does not match.") with
        "ababab" find(regex("bc")) shouldEqual(nothing)
    end
end

specifyMethod(
        "(this is String) replaceAll(regex is Regex, block is Function") with
    it should("replace all occurrences with the value from the block.") with
        ("ababab" replaceAll(regex("ab")) with "bc") shouldEqual("bcbcbc")
    end

    it should("pass each MatchResult into the block.") with
        "ababab" replaceAll(regex("ab")) with it groups[0] shouldEqual("ab")
    end

    it should("not replace anything in a string that does not have " +
              "matches.") with
        ("ababab" replaceAll(regex("bc")) with "cd") shouldEqual("ababab")
    end

end

specifyMethod(
        "(this is String) replace(regex is Regex, block is Function)") with
    it should("replace the first occurrence with the result of the block.") with
        ("ababab" replace(regex("ab")) with "bc") shouldEqual("bcabab")
    end

    it should("pass the MatchResult into the block.") with
        "ababab" replace(regex("ab")) with it groups[0] shouldEqual("ab")
    end

    it should("not replace anything if there are no matches.") with
        ("ababab" replace(regex("bc")) with "cd") shouldEqual("ababab")
    end

end

specifyMethod("regex(this is String, options is String)") with
    it should("create case insensitive regular expressions.") with
        "ABAB" find(regex("ba", "i")) isTrue shouldEqual(true)
    end

    it should("create multiline patterns.") with
        "ab\na" find(regex("b$", "m")) isTrue shouldEqual(true)
    end

    it should("create patterns in which dot matches newlines.") with
        "ab\na" find(regex("b.a", "s")) isTrue shouldEqual(true)
    end

    it should("allow multiple modifiers in the input string.") with
        "AB\na" find(regex("b.a", "si")) isTrue shouldEqual(true)
    end

    it should("throw an error when an unsupported modifier is used.") with
        fn
            result = regex("ab", "t")
        end shouldThrow(ArgumentError)
    end
end
