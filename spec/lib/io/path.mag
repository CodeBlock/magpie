import spec.specify

import io.path

val _testDir = "spec/lib/io/test_dir"
val _testPath = "spec/lib/io/test_file.txt"

specifyMethod("(path is String) baseName") with
    it should("return the last component of the filename") with
        "a" baseName shouldEqual("a")
        "/a" baseName shouldEqual("a")
        "/a/b" baseName shouldEqual("b")
        "/ab/ba/bag" baseName shouldEqual("bag")
        "/ab/ba/bag.txt" baseName shouldEqual("bag.txt")
        "/foo/bar/baz.bang" baseName shouldEqual("baz.bang")
        "/foo/bar.baz.bang" baseName shouldEqual("bar.baz.bang")
    end

    it should("ignore trailing directory separators") with
        "foo/" baseName shouldEqual("foo")
        "bar///" baseName shouldEqual("bar")
    end

    it should("handle edge cases") with
        "" baseName shouldEqual("")
        "." baseName shouldEqual(".")
        ".." baseName shouldEqual("..")
    end

    it should("optionally remove extensions") with
      "quux/foo.mag" baseName(".mag") shouldEqual("foo")
      "quux/foo.mag" baseName(".bar") shouldEqual("foo.mag")
      "quux/.mag"    baseName(".mag") shouldEqual(".mag")
    end
end

specifyMethod("(path is String) dirName") with
    it should("return all the components of filename except the last one") with
        "/dir/file" dirName shouldEqual("/dir")
        "/path/to/file.txt" dirName shouldEqual("/path/to")
        "file.txt" dirName shouldEqual("")
        "" dirName shouldEqual("")
        "/" dirName shouldEqual("")
        "/foo/foo" dirName shouldEqual("/foo")
    end

    it should("ignore a trailing '/'") with
        "/foo/bar/" dirName shouldEqual("/foo")
    end

    it should("handle edge cases") with
        "" dirName shouldEqual("")
        "." dirName shouldEqual("")
        "./" dirName shouldEqual("")
        "./b/./" dirName shouldEqual("./b")
        ".." dirName shouldEqual("")
        "../" dirName shouldEqual("")
        "/" dirName shouldEqual("")
        "/." dirName shouldEqual("/")
        "/foo/" dirName shouldEqual("/")
        "/foo/." dirName shouldEqual("/foo")
        "/foo/./" dirName shouldEqual("/foo")
        "/foo/../." dirName shouldEqual("/foo/..")
        "foo/../" dirName shouldEqual("foo")
    end
end

specifyMethod("(path is String) extension") with
    it should("return the extension of the filename") with
        "a.txt" extension shouldEqual(".txt")
        "a" extension shouldEqual("")
        "some/path/a.txt" extension shouldEqual(".txt")
        ".bashrc" extension shouldEqual("")
        "path/.bashrc" extension shouldEqual("")
    end

    it should("ignore dots in directories") with
        "dir.ext/path.txt" extension shouldEqual(".txt")
        "foo.bar/path" extension shouldEqual("")
    end

    it should("return just the last part if there are multiple dots") with
        "a.b.c" extension shouldEqual(".c")
    end

    it should("handle edge cases") with
        "" extension shouldEqual("")
        "." extension shouldEqual("")
        "/" extension shouldEqual("")
        "/." extension shouldEqual("")
        ".foo." extension shouldEqual(".")
        "foo." extension shouldEqual(".")
    end
end

specifyMethod("(path is String) exists") with
    it should("return true if the path points to a directory") with
        _testDir exists shouldEqual(true)
    end

    it should("return true if the path points to a file") with
        _testPath exists shouldEqual(true)
    end

    it should("return false if the path does not exist") with
        "non/existent" exists shouldEqual(false)
    end
end

specifyMethod("(path is String) isDir") with
    it should("return true if the path points to a directory") with
        _testDir isDir shouldEqual(true)
    end

    it should("return false if the path points to a file") with
        _testPath isDir shouldEqual(false)
    end

    it should("return false if the path does not exist") with
        "non/existent" isDir shouldEqual(false)
    end
end

specifyMethod("(path is String) isFile") with
    it should("return false if the path points to a directory") with
        _testDir isFile shouldEqual(false)
    end

    it should("return true if the path points to a file") with
        _testPath isFile shouldEqual(true)
    end

    it should("return false if the path does not exist") with
        "non/existent" isFile shouldEqual(false)
    end
end