import spec.specify

import io

val _testDir = "spec/lib/io/test_dir"
val _testFile = "spec/lib/io/test_file.txt"

specifyMethod("dir(path is String)") with
    it should("return a Directory object for the given path") with
        val directory = dir("some/path")
        directory shouldBe(Directory)
        directory path shouldEqual("some/path")
    end
end

specifyMethod("(is Directory) exists") with
    it should("return true if the path points to a valid directory") with
        dir("not/real/path") exists shouldEqual(false)
        dir(_testDir) exists shouldEqual(true)
    end

    it should("not return true if the path points to a file") with
        dir(_testFile) exists shouldEqual(false)
    end
end

specifyMethod("(is Directory) iterate") with
    it should("iterate over the contents of the directory") with
        // TODO(bob): Should these be string paths, File and Directory objects,
        // or some sort of Path object?
        val iterator = dir(_testDir) iterate
        iterator next
        iterator current shouldEqual("spec/lib/io/test_dir/a.txt")
        iterator next
        iterator current shouldEqual("spec/lib/io/test_dir/b.txt")
        iterator next
        iterator current shouldEqual("spec/lib/io/test_dir/test_subdir")
        iterator next shouldEqual(false)
    end
end
