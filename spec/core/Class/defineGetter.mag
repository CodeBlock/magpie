specify("The 'defineGetter' method on Class") with
    it should("define a readable property on the class") with
        var c = Class new("c")
        c defineGetter("foo", fn() "prop")
        c new() foo shouldBe("prop")
    end

    it should("evaluate the body each time the property is read") with
        var c = Class new("c")
        var prop = ""
        c defineGetter("foo", fn() prop = prop + "get")
        c new() foo shouldBe("get")
        c new() foo shouldBe("getget")
    end

    it should("replace an existing definition") with
        var c = Class new("c")
        c defineGetter("foo", fn() "before")
        c defineGetter("foo", fn() "after")
        c new() foo shouldBe("after")
    end

    // TODO(bob): These can't work as current written. We need to stratify the
    // code that builds the types (i.e. "var c = Class new...") from the code
    // that is statically checked against them.
    /*
    it should("create a property with the declared type") with
        expectCheckOK with
            var takesInt(arg Int) nothing
            var c = Class new("c")
            c defineGetter("foo", fn(-> Int) 123)
            takesInt(c new() foo)
        end

        expectCheckError with
            var takesInt(arg Int) nothing
            var c = Class new("c")
            c defineGetter("foo", fn(-> String) "not int")
            takesInt(c new() foo)
        end
    end

    it should("ensure the getter body returns the declared type") with
        expectCheckOK with
            var c = Class new("c")
            c defineGetter("foo", fn(-> Int) 123)
        end

        expectCheckError with
            var c = Class new("c")
            c defineGetter("foo", fn(-> Int) "not int")
        end
    end
    */
end
