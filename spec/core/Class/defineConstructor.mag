specify("The 'defineConstructor' method on Class") with
    it should("define a method called when an object is instantiated") with
        var called = false
        var c = Class new("c")
        c defineConstructor(fn() called = true)
        c new()
        called shouldBe(true)
    end

    it should("pass the arguments from 'new'") with
        var passed = ""
        var c = Class new("c")
        c defineConstructor(fn(arg) passed = arg)
        c new("arg")
        passed shouldBe("arg")
    end

    it should("replace an existing definition") with
        var called = ""
        var c = Class new("c")
        c defineConstructor(fn() called = "before")
        c defineConstructor(fn() called = "after")
        c new()
        called shouldBe("after")
    end

    // TODO(bob): Definite assignment isn't implemented yet.
    /*
    it should("definitely assign all non-initialized fields") with
        var c = Class new("c")
        c defineConstructor(fn() nothing)
        c declareField("f", fn Int)
        c shouldNotCheck()

        var d = Class new("c")
        d defineConstructor(fn() f = 123)
        d declareField("f", fn Int)
        d shouldCheck()
    end
    */
end
