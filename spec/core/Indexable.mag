import spec.specify

specify("The 'validateIndex' method on Indexables") with
    it should("return the original index if in bounds") with
        [1, 2, 3] validateIndex(0) shouldEqual(0)
        [1, 2, 3] validateIndex(1) shouldEqual(1)
        [1, 2, 3] validateIndex(2) shouldEqual(2)
    end

    it should("count backwards if the index is negative") with
        [1, 2, 3] validateIndex(-1) shouldEqual(2)
        [1, 2, 3] validateIndex(-2) shouldEqual(1)
        [1, 2, 3] validateIndex(-3) shouldEqual(0)
    end

    it should("throw an OutOfBoundsError on a bad index") with
        var list = [1, 2, 3]
        fn
            list validateIndex(3)
        end shouldThrow(OutOfBoundsError)

        fn
            list validateIndex(-4)
        end shouldThrow(OutOfBoundsError)
    end
end

specify("The 'iterate' method on Indexables") with
    it should("create an IndexableIterator") with
        var iterator = [1, 2, 3] iterate()
        iterator shouldBe(IndexableIterator)
    end
end
