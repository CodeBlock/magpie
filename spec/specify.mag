var totalTests = 0
var totalFailures = 0

var currentTestSuite = nothing
var startTimeMs = 0

def startTests(->)
    totalTests = 0
    totalFailures = 0
    currentTestSuite = nothing
    print("Executing specification...")
    startTimeMs = Runtime now()
end

def endTests(->)
    var endTimeMs = Runtime now()
    print("")
    print("Passed " + (totalTests - totalFailures) + " out of " +
        totalTests + " tests in " + (endTimeMs - startTimeMs) + "ms.")
end

def specify(description String, block TestSuite => Nothing ->)
    var suite = TestSuite new(description)
    block(suite)
    
    totalTests = totalTests + suite tests
    totalFailures = totalFailures + suite failures
end

class TestSuite
    this(name String)
        this name = name
        currentTestSuite = this
        currentTest = ""
        tests = 0
        failures = 0
    end
    
    def should(description String, block Nothing => Nothing ->)
        currentTest = description
        var testsBefore = tests
        var failuresBefore = failures
        block()
        if tests == testsBefore then
            print("NONE: " + name + " should " + currentTest + ".")
        end
    end
    
    def pass(->) tests = tests + 1
    
    var name        String
    var currentTest String
    var tests       Int
    var failures    Int
end
    
def fail(message String ->)
    if currentTestSuite failures == 0 then
        print("FAIL: " + currentTestSuite name + " should " +
            currentTestSuite currentTest + ".")
    end
    currentTestSuite tests = currentTestSuite tests + 1
    currentTestSuite failures = currentTestSuite failures + 1
    print("      " + message)
end

extend class Object
    def shouldBe(expected, message String | Nothing ->)
        if this != expected then
            if message == nothing then
                message = "Expected " + expected + " but was " + this
            end
            // TODO(bob): Exceptions would be good here.
            currentTestSuite fail(message)
        else
            currentTestSuite pass()
        end
    end
end

def envExpectCheckError(block)
    (Runtime checkExpression(block) count > 0) shouldBe(true,
        "Should have a check error but did not.")
end

def envExpectCheckOK(block)
    var errors = Runtime checkExpression(block)
    errors count shouldBe(0, "Should not have any check errors but had:")
    for error = errors do print("      - " + error)
end

// Verifies that the function has no type check errors.
def Function shouldCheck()
    var errors = Runtime checkFunction(this)
    errors count shouldBe(0, "Function should not have any check errors but had:")
    for error = errors do print("      - " + error)
end

// Verifies that the given function does have one or more type check errors.
def Function shouldNotCheck()
    (Runtime checkFunction(this) count > 0) shouldBe(true,
        "Function should have one or more check errors but did not.")
end

// Verifies that a function throws an error of the given class. Will execute the
// function. 
def Function shouldThrow(errorClass Class ->)
    var caught = false
    do
        this()
    catch err Error then
        err type shouldBe(errorClass)
        caught = true
    end
    caught shouldBe(true)
end

// Verifies that the class has no type check errors.
def Class shouldCheck()
    var errors = Runtime checkClass(this)
    errors count shouldBe(0, "Class should not have any check errors but had:")
    for error = errors do print("      - " + error)
end

// Verifies that the class has one or more type check errors.
def Class shouldNotCheck()
    (Runtime checkClass(this) count > 0) shouldBe(true,
        "Class should have one or more check errors but did not.")
end
