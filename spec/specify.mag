import magpie.reflect

var totalTests = 0
var totalFailures = 0

var currentTestSuite = nothing
var startTimeMs = 0

def startTests()
    totalTests = 0
    totalFailures = 0
    currentTestSuite = nothing
    print("Executing specification...")
    startTimeMs = currentTime()
end

def endTests()
    var endTimeMs = currentTime()
    print()
    print("Passed " + (totalTests - totalFailures) + " out of " +
        totalTests + " tests in " + (endTimeMs - startTimeMs) + "ms.")
end

// TODO(bob): Need function types.
def specify(description is String, block)
    currentTestSuite = TestSuite new(name: description)
    block call(currentTestSuite)
end

defclass TestSuite
    var name        String
    var currentTest String = ""
    var failedTest  Bool   = false
end

// TODO(bob): Need function types.
def (this is TestSuite) should(description is String, block)
    // TODO(bob): Should not need "this " before setting fields.
    this currentTest = description
    var testsBefore = totalTests
    this failedTest = false

    do
        block call()
    catch error then
        fail("Unexpected error: " + error class)
    end

    if totalTests == testsBefore then
        print("NONE: " + this name + " should " + this currentTest + ".")
    end
end

def (this is TestSuite) pass()
    this advance()
end

def (this is TestSuite) advance()
    totalTests = totalTests + 1
end

def (this is TestSuite) fail(message is String)
    if not(this failedTest) then
        print("FAIL: " + this name + " should " + this currentTest + ".")
    end
    this advance()
    totalFailures = totalFailures + 1
    print("      " + message)
    this failedTest = true
end

def fail(message is String)
    currentTestSuite fail(message)
end

def (this) shouldEqual(expected, message is String)
    if this != expected then
        currentTestSuite fail(message)
    else
        currentTestSuite pass()
    end
end

def (this) shouldEqual(expected)
    this shouldEqual(expected, "Expected " + expected + " but was " + this)
end

def (this) shouldBe(expected is Class, message is String)
    if this is?(expected) then
        currentTestSuite pass()
    else
        currentTestSuite fail(message)
    end
end

def (this) shouldBe(expected is Class)
    this shouldBe(expected, "Expected class " + expected + " but was " + this class)
end

// Verifies that a function throws an error of the given class. Will execute the
// function.
def (this is Function) shouldThrow(errorClass is Class)
    var caught = false
    do
        this call()
    catch err is Error then
        err shouldBe(errorClass, "Should have thrown an error of class " +
            errorClass + " but got an error of class " + err class + ".")
        caught = true
    end
    caught shouldEqual(true, "Should have thrown an error of class " +
        errorClass + " but no error was thrown.")
end

// Verifies that a function does not throw an error. Will execute the function.
def (this is Function) shouldNotThrow()
    var caught = nothing
    do
        this call()
    catch err is Error then
        caught = err
    end
    caught shouldEqual(nothing, "Should not have thrown an error but threw " +
        "an error of class " + caught class + ".")
end
