var totalTests = 0
var totalFailures = 0

var currentTestSuite = nothing

var startTests(->)
    totalTests = 0
    totalFailures = 0
    currentTestSuite = nothing
    print("Executing specification...")
end

var endTests(->)
    print("")
    print("Passed " + (totalTests - totalFailures) + " out of " + totalTests + " tests.")
end

var specify(description String, block Function(Nothing, Nothing) ->)
    var suite = TestSuite new(description)
    block(suite)
    
    totalTests = totalTests + suite tests
    totalFailures = totalFailures + suite failures
end

class TestSuite
    this(name)
        this name = name
        currentTestSuite = this
        currentTest = ""
        tests = 0
        failures = 0
    end
    
    should(description String, block Function(Nothing, Nothing) ->)
        currentTest = description
        var testsBefore = tests
        var failuresBefore = failures
        block()
        if tests == testsBefore then
            print("NONE: " + name + " should " + currentTest + ".")
        end
    end
    
    fail(message String ->)
        if failures == 0 then
            print("FAIL: " + name + " " + currentTest + ".")
        end
        tests = tests + 1
        failures = failures + 1
        print("      " + message)
    end
    
    pass()
        tests = tests + 1
    end
    
    name String
    currentTest String
    tests Int
    failures Int
end

def Object shouldBe(expected)
    if this != expected then
        // TODO(bob): Exceptions would be good here.
        currentTestSuite fail("Expected " + expected + " but was " + this)
    else
        currentTestSuite pass
    end
end
