var totalTests = 0
var totalFailures = 0

var currentTestSuite = nothing
var startTimeMs = 0

def startTests()
    totalTests = 0
    totalFailures = 0
    currentTestSuite = nothing
    print("Executing specification...")
    startTimeMs = Runtime now()
end

def endTests()
    var endTimeMs = Runtime now()
    print()
    print("Passed " ~ (totalTests - totalFailures) ~ " out of " ~
        totalTests ~ " tests in " ~ (endTimeMs - startTimeMs) ~ "ms.")
end

def specify(description String, block TestSuite => Nothing)
    var suite = TestSuite new(description)
    block(suite)
end

class TestSuite
    shared def new(name String)
        var suite = construct(name: name)
        currentTestSuite = suite
        suite
    end

    def should(description String, block Nothing => Nothing)
        currentTest = description
        var testsBefore = totalTests
        failedTest = false

        do
            block()
        catch error then
            fail("Unexpected error: " ~ error type)
        end

        if totalTests == testsBefore then
            print("NONE: " ~ name ~ " should " ~ currentTest ~ ".")
        end
    end

    def pass() advance()

    def fail(message String)
        if failedTest not then
            print("FAIL: " ~ name ~ " should " ~ currentTest ~ ".")
        end
        advance()
        totalFailures = totalFailures + 1
        print("      " ~ message)
        failedTest = true
    end

    def advance()
        totalTests = totalTests + 1
        // Show the progress.
        if (totalTests % 10) == 0 then prints(".")
    end

    var name        String
    var currentTest String = ""
    var failedTest  Bool   = false
end

def fail(message String)
    currentTestSuite fail(message)
end

extend class Object
    def shouldEqual(expected, message String | Nothing)
        if this != expected then
            if message == nothing then
                message = "Expected " ~ expected ~ " but was " ~ this
            end
            // TODO(bob): Exceptions would be good here.
            currentTestSuite fail(message)
        else
            currentTestSuite pass()
        end
    end

    def shouldBe(expected, message)
        if is(expected) then
            currentTestSuite pass()
        else
            if message == nothing then
                message = "Expected type " ~ expected ~ " but was " ~ this
            end
            // TODO(bob): Exceptions would be good here.
            currentTestSuite fail(message)
        end
    end
end

// Verifies that a function throws an error of the given class. Will execute the
// function.
def Function shouldThrow(errorClass Class)
    var caught = false
    do
        this()
    catch err Error then
        Reflect getClass(err) shouldEqual(errorClass, "Should have thrown an error of class " ~
            errorClass ~ " but got an error of class " ~ Reflect getClass(err) ~
            " instead.")
        caught = true
    end
    caught shouldEqual(true, "Should have thrown an error of class " ~ errorClass ~
        " but no error was thrown.")
end

// Verifies that a function does not throw an error. Will execute the function.
def Function shouldNotThrow()
    var caught = false
    do
        this()
    catch err Error then
        caught = true
    end
    caught shouldEqual(false)
end
