var totalTests = 0
var totalFailures = 0

var currentTestSuite = nothing
var startTimeMs = 0

def startTests(->)
    totalTests = 0
    totalFailures = 0
    currentTestSuite = nothing
    print("Executing specification...")
    startTimeMs = Runtime now()
end

def endTests(->)
    var endTimeMs = Runtime now()
    print("")
    print("Passed " + (totalTests - totalFailures) + " out of " +
        totalTests + " tests in " + (endTimeMs - startTimeMs) + "ms.")
end

def specify(description String, block Function(TestSuite, Nothing) ->)
    var suite = TestSuite new(description)
    block(suite)
    
    totalTests = totalTests + suite tests
    totalFailures = totalFailures + suite failures
end

class TestSuite
    this(name String)
        this name = name
        currentTestSuite = this
        currentTest = ""
        tests = 0
        failures = 0
    end
    
    def should(description String, block Function(Nothing, Nothing) ->)
        currentTest = description
        var testsBefore = tests
        var failuresBefore = failures
        block()
        if tests == testsBefore then
            print("NONE: " + name + " should " + currentTest + ".")
        end
    end
    
    def fail(message String ->)
        if failures == 0 then
            print("FAIL: " + name + " should " + currentTest + ".")
        end
        tests = tests + 1
        failures = failures + 1
        print("      " + message)
    end
    
    def pass(->) tests = tests + 1
    
    var name        String
    var currentTest String
    var tests       Int
    var failures    Int
end

extend class Object
    def shouldBe(expected, message String ->)
        if this != expected then
            if message == nothing then
                message = "Expected " + expected + " but was " + this
            end
            // TODO(bob): Exceptions would be good here.
            currentTestSuite fail(message)
        else
            currentTestSuite pass()
        end
    end

    def expectCheckError(block)
        (Runtime checkFunction(block) count > 0) shouldBe(true,
            "Should have a check error but did not.")
    end

    def expectCheckOK(block)
        var errors = Runtime checkFunction(block)
        errors count shouldBe(0, "Should not have any check errors but had:")
        for error = errors do print("      - " + error)
    end

    def envExpectCheckError(block)
        (Runtime checkExpression(block) count > 0) shouldBe(true,
            "Should have a check error but did not.")
    end

    def envExpectCheckOK(block)
        var errors = Runtime checkExpression(block)
        errors count shouldBe(0, "Should not have any check errors but had:")
        for error = errors do print("      - " + error)
    end
end