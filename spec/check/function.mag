specify("A function") with
    it should("return the declared type") with
        (fn(-> Int) 123) shouldCheck()
        (fn(-> Int) "string") shouldNotCheck()
    end

    it should("know the types of variables in its closure") with
        fn
            var s = "string"
            fn(-> String) s
        end shouldCheck()

        fn
            var s = "string"
            fn(-> Int) s
        end shouldNotCheck()
    end
end

specify("A generic function") with
    it should("infer type parameters from the argument types") with
        fn
            def id[T](a T -> T) a

            def expectInt(a Int ->) nothing
            def expectString(a String ->) nothing

            expectInt(id(123))
            expectString(id("s"))
        end shouldCheck()

        fn
            def id[T](a T -> T) a

            def expectInt(a Int ->) nothing
            def expectString(a String ->) nothing

            expectInt(id("s"))
            expectString(id(123))
        end shouldNotCheck()
    end

    it should("union the types of an argument inferred more than once") with
        fn
            def both[T](a T, b T -> T) a or b
            def expectIntOrString(a Int | String ->) nothing
            expectIntOrString(both(123, "s"))
        end shouldCheck()

        fn
            def both[T](a T, b T -> T) a or b
            def expectInt(a Int ->) nothing
            expectInt(both(123, "s"))
        end shouldNotCheck()

        fn
            def both[T](a T, b T -> T) a or b
            def expectString(a String ->) nothing
            expectString(both(123, "s"))
        end shouldNotCheck()
    end

    it should("type check the body using the constraints") with
        fn
            def foo[T Int](arg T) arg + arg
            foo(123)
        end shouldCheck()

        fn
            def foo[T Bool](arg T) arg + arg
            foo(true)
        end shouldNotCheck()
    end

    /*
    - ignore extra type parameters
    - bind missing ones to Nothing
    - make sure type args match constraints
    - what about inferred type parameters? right now, they aren't available
      at runtime. should they be? consider:
      def foo[T](a T -> T)
          print(T)
      end
      should that work?
      a: no. you can always do "a type" here if you need it, and we shouldn't
      waste the cycles in the (majority) cases where you don't.

    def whenIs[A, B](b B -> B | Nothing)
        if b is[A] then b
    end

    whenIs[Derived](base)
    */
end
