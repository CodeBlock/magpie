specify("A function") with
    it should("return the declared type") with
        (fn(-> Int) 123) shouldCheck()
        (fn(-> Int) "string") shouldNotCheck()
    end

    it should("know the types of variables in its closure") with
        fn
            var s = "string"
            fn(-> String) s
        end shouldCheck()

        fn
            var s = "string"
            fn(-> Int) s
        end shouldNotCheck()
    end
end

specify("A generic function") with
    it should("infer type parameters from the argument types") with
        fn
            def id[T](a T -> T) a

            def expectInt(a Int ->) nothing
            def expectString(a String ->) nothing

            expectInt(id(123))
            expectString(id("s"))
        end shouldCheck()

        fn
            def id[T](a T -> T) a

            def expectInt(a Int ->) nothing
            def expectString(a String ->) nothing

            expectInt(id("s"))
            expectString(id(123))
        end shouldNotCheck()
    end

    it should("type check the body using the constraints") with
        fn
            def foo[T Int](arg T) arg + arg
            foo(123)
        end shouldCheck()

        fn
            def foo[T Bool](arg T) arg + arg
            foo(true)
        end shouldNotCheck()
    end
end
