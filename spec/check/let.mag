// TODO(bob): For now, "let" is removed from the language.
nothing
/*
specify("A 'let then' expression") with
    it should("have the type of the 'then' expression or Nothing") with
        (typeof let a = "cond" then 123)     shouldBe(Int | Nothing)
        (typeof let a = "cond" then nothing) shouldBe(Nothing)
    end

    it should("create a variable of the condition's type without Nothing") with
        fn
            def takesInt(arg Int) nothing
            var cond = if true then 1
            let a = cond then takesInt(a)
        end shouldCheck()
    end
end

specify("A 'let then else' expression") with
    it should("have the type of both arms") with
        (typeof let a = "cond" then 123 else "s") shouldBe(Int | String)
        (typeof let a = "cond" then "s" else "s") shouldBe(String)
    end

    it should("create a variable of the condition's type without Nothing") with
        fn
            def takesInt(arg Int) nothing
            var cond = if true then 1
            let a = cond then takesInt(a) else "ignored"
        end shouldCheck()
    end
end
*/