specify("An 'if then' expression") with
    it should("have the 'then' expression's type or Nothing") with
        (typeof if "cond" then 123)     shouldBe(Int | Nothing)
        (typeof if "cond" then nothing) shouldBe(Nothing)
    end
end

specify("An 'if then else' expression") with
    it should("have the type of both arms") with
        (typeof if "cond" then 123 else "s") shouldBe(Int | String)
        (typeof if "cond" then "s" else "s") shouldBe(String)
    end
        
    it should("create a local scope for the condition expression that ends " ~
              "after the entire 'if' expression") with
        fn
            if var a = true then nothing else nothing
            a = false
        end shouldNotCheck()

        fn
            if var a = true then a = false else a = false
        end shouldCheck()
    end
    
    it should("create a local scope for the 'then' expression that is not " ~
              "visible to the 'else' expression") with
        fn
            if true then var a = "s" else a = "a string"
        end shouldNotCheck()

        fn
            var a = "s"
            if true then var a = 123 else a = "a string"
        end shouldCheck()
    end
end
