specify("A 'return' expression") with
    it should("evaluate to the Never type") with
        (typeof return) shouldBe(Never)
    end
    
    it should("have its value included in the function's return type") with
        expectCheckError with
            def f(-> Int)
                if true then return "string"
                if true then return true
                123
            end
        end

        expectCheckOK with
            def f(-> Bool | Int | String)
                if true then return "string"
                if true then return true
                123
            end
        end

        expectCheckError with
            def f(-> Int)
                if true then return
                123
            end
        end

        expectCheckOK with
            def f(-> Int | Nothing)
                if true then return
                123
            end
        end
    end
    
    it should("generate an error for unreachable code") with
        expectCheckError with
            return "value"
            "unreachable"
        end

        expectCheckError with
            (return) and "value"
        end
        
        expectCheckError with
            (return) or "value"
        end
        
        expectCheckError with
            (return) string
        end
    end
    
    it should("be omitted from the type of a surrounding 'if then'") with
        (typeof if true then return 123) shouldBe(Nothing)
        (typeof if true then return 123 else "str") shouldBe(String)
        (typeof if true then 123 else return "str") shouldBe(Int)

        (typeof if true then return 123 else return "str") shouldBe(Never)
    end
    
    it should("be omitted from the type of a surrounding 'let then'") with
        (typeof let a = 1 then return 123) shouldBe(Nothing)
        (typeof let a = 1 then return 123 else "str") shouldBe(String)
        (typeof let a = 1 then 123 else return "str") shouldBe(Int)

        (typeof let a = 1 then return 123 else return "str") shouldBe(Never)
    end
    
    it should("be omitted from the type of a surrounding 'and'") with
        (typeof "string" and (return 123)) shouldBe(String)
    end
    
    it should("be omitted from the type of a surrounding 'or'") with
        (typeof "string" or (return 123)) shouldBe(String)
    end
end
