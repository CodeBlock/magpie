specify("A 'return' expression") with
    it should("evaluate to the Never type") with
        (typeof return) shouldBe(Never)
    end
    
    it should("have its value included in the function's return type") with
        fn(-> Int)
            if true then return "string"
            if true then return true
            123
        end shouldNotCheck()

        fn(-> Bool | Int | String)
            if true then return "string"
            if true then return true
            123
        end shouldCheck()

        fn(-> Int)
            if true then return
            123
        end shouldNotCheck()

        fn(-> Int | Nothing)
            if true then return
            123
        end shouldCheck()
    end
    
    it should("generate an error for unreachable code") with
        fn
            return "value"
            "unreachable"
        end shouldNotCheck()

        fn
            (return) and "value"
        end shouldNotCheck()
        
        fn
            (return) or "value"
        end shouldNotCheck()
        
        fn
            (return) string
        end shouldNotCheck()
    end
    
    it should("be omitted from the type of a surrounding 'if then'") with
        (typeof if true then return 123) shouldBe(Nothing)
        (typeof if true then return 123 else "str") shouldBe(String)
        (typeof if true then 123 else return "str") shouldBe(Int)

        (typeof if true then return 123 else return "str") shouldBe(Never)
    end
    
    it should("be omitted from the type of a surrounding 'let then'") with
        (typeof let a = 1 then return 123) shouldBe(Nothing)
        (typeof let a = 1 then return 123 else "str") shouldBe(String)
        (typeof let a = 1 then 123 else return "str") shouldBe(Int)

        (typeof let a = 1 then return 123 else return "str") shouldBe(Never)
    end
    
    it should("be omitted from the type of a surrounding 'and'") with
        (typeof "string" and (return 123)) shouldBe(String)
    end
    
    it should("be omitted from the type of a surrounding 'or'") with
        (typeof "string" or (return 123)) shouldBe(String)
    end
end
